<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	                xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:dance="clr-namespace:Dance.Wpf"
	                xmlns:avalonDock="clr-namespace:AvalonDock;assembly=AvalonDock"
	                xmlns:avalonDockControls="clr-namespace:AvalonDock.Controls;assembly=AvalonDock"
	                xmlns:avalonDockConverters="clr-namespace:AvalonDock.Converters;assembly=AvalonDock"
	                xmlns:avalonDockLayout="clr-namespace:AvalonDock.Layout;assembly=AvalonDock"
	                xmlns:avalonDockProperties="clr-namespace:AvalonDock.Properties;assembly=AvalonDock"
	                xmlns:shell="clr-namespace:Microsoft.Windows.Shell;assembly=AvalonDock">

    <PathGeometry x:Key="PinAutoHide" Figures="M 128,17.475L 130.842,17.475L 130.842,2.91001L 130.842,0.608195L 130.842,0.000223796L 139.593,0.000223796L 145.003,0.000223796L 145.424,0.000223796L 145.424,17.475L 148.413,17.475L 148.413,20.3848L 139.684,20.3848L 139.684,32.0003L 136.752,32.0003L 136.752,20.3848L 128,20.3848L 128,17.475 Z M 133.774,2.91007L 133.774,17.475L 139.593,17.475L 139.593,2.91007L 133.774,2.91007 Z" />
    <PathGeometry x:Key="HTabGroup" Figures="M 2.53856,7.38456L 2.53856,12.3846L 31.9231,12.3846L 31.9231,7.38456L 2.53856,7.38456 Z M 0,0.000162761L 34.3846,0.000162761L 34.3846,14.7694L 0,14.7694L 0,0.000162761 Z M 2.53861,24.6155L 2.53861,29.6155L 31.9232,29.6155L 31.9232,24.6155L 2.53861,24.6155 Z M 5.00801e-005,17.2309L 34.3846,17.2309L 34.3846,32.0001L 5.00801e-005,32.0001L 5.00801e-005,17.2309 Z " />
    <PathGeometry x:Key="VTabGroup" Figures="M 64,0.000223796L 101.319,0.000223796L 101.319,32.0002L 64,32.0002L 64,0.000223796 Z M 66.6804,8.03752L 66.6804,29.3154L 79.896,29.3154L 79.896,8.03752L 66.6804,8.03752 Z M 85.4232,8.03746L 85.4232,29.3154L 98.6388,29.3154L 98.6388,8.03746L 85.4232,8.03746 Z " />
    <PathGeometry x:Key="DockPaneLargeEmpty" Figures="M 192,19.4161L 192,12.5843L 202.892,12.5843L 204.584,10.8924L 204.584,0.000223796L 211.416,0.000223796L 211.416,10.8924L 213.108,12.5843L 224,12.5843L 224,19.4161L 213.108,19.4161L 211.416,21.108L 211.416,32.0002L 204.584,32.0002L 204.584,21.108L 202.892,19.4161L 192,19.4161 Z " />
    <PathGeometry x:Key="DockPaneEmpty" Figures="M 266.388,0.000223796L 277.612,0.000223796L 277.612,7.60856L 280.392,10.3883L 288,10.3883L 288,21.6122L 280.392,21.6122L 277.612,24.3919L 277.612,32.0002L 266.388,32.0002L 266.388,24.3919L 263.608,21.6122L 256,21.6122L 256,10.3883L 263.608,10.3883L 266.388,7.60856L 266.388,0.000223796 Z " />
    <PathGeometry x:Key="PinMenu" Figures="M 352.041,32.0005L 320,0.000162761L 384,0.000162761L 352.041,32.0005 Z " />
    <PathGeometry x:Key="PinClose" Figures="M 0,2.0345e-005L 7.62109,2.0345e-005L 19.2627,12.0551L 30.9043,2.0345e-005L 38.5241,2.0345e-005L 23.0726,16.0003L 38.5234,32L 30.9023,32L 19.2621,19.9462L 7.62177,32L 0.00195313,32L 15.4521,16.001L 0,2.0345e-005 Z" />
    <PathGeometry x:Key="PinRestore" Figures="M0,10L0,3 3,3 3,0 10,0 10,2 4,2 4,3 7,3 7,6 6,6 6,5 1,5 1,10z M1,10L7,10 7,7 10,7 10,2 9,2 9,6 6,6 6,9 1,9z" />
    <PathGeometry x:Key="PinMaximize" Figures="M0,0L0,9 9,9 9,0 0,0 0,3 8,3 8,8 1,8 1,3 0,3z" />
    <PathGeometry x:Key="PinDocMenu" Figures="M 608,0.000223796L 640,0.000223796L 640,7.70652L 608,7.70652L 608,0.000223796 Z M 624.021,32.0002L 608,16.0001L 640,16.0001L 624.021,32.0002 Z " />
    <PathGeometry x:Key="Locked" Figures="M 1.77411,12.4183L 23.0627,12.4183C 24.0423,12.4183 24.8366,13.2126 24.8366,14.1925L 24.8366,30.1588C 24.8366,31.1386 24.0423,31.9329 23.0627,31.9329L 1.77411,31.9329C 0.794312,31.9329 0,31.1386 0,30.1588L 0,14.1925C 0,13.2126 0.794312,12.4183 1.77411,12.4183 Z M 14.5149,22.095C 15.0955,21.6111 15.4826,20.9337 15.4826,20.1595C 15.4826,18.805 14.4182,17.7404 13.0635,17.7404C 11.7087,17.7404 10.6442,18.8048 10.6442,20.1595C 10.6442,20.9337 11.0313,21.6111 11.6119,22.095L 11.6119,24.0302C 11.6119,24.8044 12.2893,25.4818 13.0633,25.4818C 13.8375,25.4818 14.5149,24.8044 14.5149,24.0302L 14.5149,22.095 Z M 20.9659,12.4183L 18.063,12.4183L 18.063,8.70894C 18.063,5.51565 15.4504,2.90304 12.257,2.90304C 9.06372,2.90304 6.45111,5.51565 6.45111,8.70894L 6.45111,12.4183L 3.54816,12.4183L 3.54816,8.70894C 3.54816,3.87069 7.41882,2.03401e-005 12.257,2.03401e-005C 17.0955,2.03401e-005 20.9659,3.87069 20.9659,8.70894L 20.9659,12.4183 Z " />

    <Style x:Key="AvalonDockToolButton" TargetType="Button">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"></Setter>
        <Setter Property="BorderBrush" Value="Transparent"></Setter>
        <Setter Property="BorderThickness" Value="0"></Setter>
        <Setter Property="Background" Value="Transparent"></Setter>
        <Setter Property="Width" Value="20"></Setter>
        <Setter Property="Height" Value="20"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <ContentPresenter></ContentPresenter>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource ResourceKey={x:Static Member=dance:DanceResourceKey.BACKGROUND_BRUSH_MOUSE_OVER}}"></Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="AvalonDockToolToggleButton" TargetType="ToggleButton">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"></Setter>
        <Setter Property="BorderBrush" Value="Transparent"></Setter>
        <Setter Property="BorderThickness" Value="0"></Setter>
        <Setter Property="Background" Value="Transparent"></Setter>
        <Setter Property="Width" Value="20"></Setter>
        <Setter Property="Height" Value="20"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <ContentPresenter></ContentPresenter>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource ResourceKey={x:Static Member=dance:DanceResourceKey.BACKGROUND_BRUSH_MOUSE_OVER}}"></Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type avalonDockControls:ContextMenuEx}">
        <Setter Property="Background" Value="{DynamicResource ResourceKey={x:Static Member=dance:DanceResourceKey.CHUNK_BAR_BACKGROUND}}"/>
        <Setter Property="FontFamily" Value="{DynamicResource ResourceKey={x:Static Member=dance:DanceResourceKey.FONT_FAMILY}}"/>
        <Setter Property="FontSize" Value="{DynamicResource ResourceKey={x:Static Member=dance:DanceResourceKey.FONT_SIZE}}"/>
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey={x:Static Member=dance:DanceResourceKey.FOREGROUND_BRUSH}}"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey={x:Static Member=dance:DanceResourceKey.BORDER_BRUSH}}"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Grid.IsSharedSizeScope" Value="true"/>
        <Setter Property="HasDropShadow" Value="True"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                    <Border Name="ContextMenuBorder" Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <ScrollViewer Name="ContextMenuScrollViewer"
                                      Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}}">
                            <Grid RenderOptions.ClearTypeHint="Enabled">
                                <ItemsPresenter Name="ItemsPresenter" Margin="{TemplateBinding Padding}"
                                            KeyboardNavigation.DirectionalNavigation="Cycle"
                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  DocumentPaneControlStyle  -->
    <Style x:Key="DocumentPaneControlStyle" TargetType="{x:Type avalonDockControls:LayoutDocumentPaneControl}">
        <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey={x:Static Member=dance:DanceResourceKey.BORDER_BRUSH}}"></Setter>
        <Setter Property="Padding" Value="0"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutDocumentPaneControl}">
                    <Grid
						ClipToBounds="true"
						KeyboardNavigation.TabNavigation="Local"
						SnapsToDevicePixels="true">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>
                        <!--  Following border is required to catch mouse events  -->
                        <Border Grid.RowSpan="2" Background="Transparent" />
                        <Grid Panel.ZIndex="1" Visibility="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type avalonDockControls:LayoutDocumentPaneControl}}, Path=Model.ShowHeader, Converter={avalonDockConverters:BoolToVisibilityConverter}}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <avalonDockControls:DocumentPaneTabPanel
								x:Name="HeaderPanel"
								Grid.Row="0"
								Grid.Column="0"
								IsItemsHost="true"
								KeyboardNavigation.TabIndex="1" />
                            <avalonDockControls:DropDownButton
								x:Name="MenuDropDownButton"
								Grid.Column="1"
								Focusable="False"
								Style="{StaticResource AvalonDockToolToggleButton}">
                                <avalonDockControls:DropDownButton.DropDownContextMenu>
                                    <avalonDockControls:ContextMenuEx ItemsSource="{Binding Model.ChildrenSorted, RelativeSource={RelativeSource TemplatedParent}}">
                                        <avalonDockControls:ContextMenuEx.ItemContainerStyle>
                                            <Style BasedOn="{StaticResource {x:Type MenuItem}}" TargetType="{x:Type avalonDockControls:MenuItemEx}">
                                                <Setter Property="HeaderTemplate" Value="{Binding Path=Root.Manager.DocumentPaneMenuItemHeaderTemplate}" />
                                                <Setter Property="HeaderTemplateSelector" Value="{Binding Path=Root.Manager.DocumentPaneMenuItemHeaderTemplateSelector}" />
                                                <Setter Property="IconTemplate" Value="{Binding Path=Root.Manager.IconContentTemplate}" />
                                                <Setter Property="IconTemplateSelector" Value="{Binding Path=Root.Manager.IconContentTemplateSelector}" />
                                                <Setter Property="Command" Value="{Binding Path=., Converter={avalonDockConverters:ActivateCommandLayoutItemFromLayoutModelConverter}}" />
                                            </Style>
                                        </avalonDockControls:ContextMenuEx.ItemContainerStyle>
                                    </avalonDockControls:ContextMenuEx>
                                </avalonDockControls:DropDownButton.DropDownContextMenu>
                                <Border Background="Transparent">
                                    <Path x:Name="MenuDropDownButtonImage" Height="8" HorizontalAlignment="Center" VerticalAlignment="Center" Data="{StaticResource PinDocMenu}" Stretch="Uniform" 
									      Fill="{DynamicResource ResourceKey={x:Static Member=dance:DanceResourceKey.FOREGROUND_BRUSH_MARK}}"/>
                                </Border>
                            </avalonDockControls:DropDownButton>
                        </Grid>
                        <Border
							x:Name="ContentPanel"
							Grid.Row="1"
							Grid.Column="0"
							HorizontalAlignment="Stretch"
							VerticalAlignment="Stretch"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							KeyboardNavigation.DirectionalNavigation="Contained"
							KeyboardNavigation.TabIndex="2"
							KeyboardNavigation.TabNavigation="Cycle">
                            <ContentPresenter
								x:Name="PART_SelectedContentHost"
								Margin="{TemplateBinding Padding}"
								ContentSource="SelectedContent"
								SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Model.ChildrenCount}" Value="0">
                            <Setter TargetName="MenuDropDownButton" Property="Visibility" Value="Collapsed" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="{x:Type TabItem}">
                    <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
                    <Setter Property="IsEnabled" Value="{Binding IsEnabled}" />
                    <Setter Property="ToolTip" Value="{Binding ToolTip}" />
                    <Setter Property="Margin" Value="0,0,0,-1"></Setter>
                    <Setter Property="BorderBrush" Value="Transparent"></Setter>
                    <Setter Property="Background" Value="Transparent"></Setter>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type TabItem}">
                                <Grid SnapsToDevicePixels="true">
                                    <Border
										x:Name="Bd"
										Padding="{TemplateBinding Padding}"
										Background="{TemplateBinding Background}"
										BorderBrush="{TemplateBinding BorderBrush}"
										BorderThickness="1,1,1,0">
                                        <ContentPresenter
											x:Name="Content"
											HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
											VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
											ContentSource="Header"
											RecognizesAccessKey="True"
											SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                    </Border>
                                </Grid>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="Selector.IsSelected" Value="true">
                                        <Setter Property="Background" Value="White" />
                                        <Setter Property="Panel.ZIndex" Value="1" />
                                        <Setter Property="Margin" Value="0,0,0,-1" />
                                        <Setter Property="Foreground" Value="{DynamicResource ResourceKey={x:Static Member=dance:DanceResourceKey.BORDER_BRUSH_SELECTED}}"></Setter>
                                        <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey={x:Static Member=dance:DanceResourceKey.BORDER_BRUSH}}"></Setter>
                                    </Trigger>
                                    <MultiTrigger>
                                        <MultiTrigger.Conditions>
                                            <Condition Property="IsMouseOver" Value="true" />
                                            <Condition Property="Selector.IsSelected" Value="false" />
                                        </MultiTrigger.Conditions>
                                        <Setter Property="Background" Value="{DynamicResource ResourceKey={x:Static Member=dance:DanceResourceKey.BACKGROUND_BRUSH_MOUSE_OVER}}"></Setter>
                                        <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey={x:Static Member=dance:DanceResourceKey.BACKGROUND_BRUSH_MOUSE_OVER}}"></Setter>
                                        <Setter Property="Panel.ZIndex" Value="0" />
                                    </MultiTrigger>
                                    <Trigger Property="IsEnabled" Value="false">
                                        <Setter Property="Opacity" Value="{DynamicResource {x:Static dance:DanceResourceKey.CONTROL_OPACITY_DISABLED}}" />
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <avalonDockControls:LayoutDocumentTabItem Model="{Binding}" />
                </DataTemplate>
            </Setter.Value>
        </Setter>

        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <avalonDockControls:LayoutDocumentControl Model="{Binding}" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  AnchorablePaneControlStyle  -->
    <Style x:Key="AnchorablePaneControlStyle" TargetType="{x:Type avalonDockControls:LayoutAnchorablePaneControl}">
        <Setter Property="Foreground" Value="{Binding Model.Root.Manager.Foreground, RelativeSource={RelativeSource Self}}" />
        <Setter Property="Background" Value="{Binding Model.Root.Manager.Background, RelativeSource={RelativeSource Self}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey={x:Static Member=dance:DanceResourceKey.BORDER_BRUSH}}"></Setter>
        <Setter Property="TabStripPlacement" Value="Bottom" />
        <Setter Property="Padding" Value="0"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutAnchorablePaneControl}">
                    <Grid
						ClipToBounds="true"
						KeyboardNavigation.TabNavigation="Local"
						SnapsToDevicePixels="true">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <!--  Following border is required to catch mouse events  -->
                        <Border Grid.RowSpan="2" Background="Transparent" />
                        <Border
							x:Name="ContentPanel"
							Grid.Row="0"
							Grid.Column="0"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							KeyboardNavigation.DirectionalNavigation="Contained"
							KeyboardNavigation.TabIndex="2"
							KeyboardNavigation.TabNavigation="Cycle">
                            <ContentPresenter
								x:Name="PART_SelectedContentHost"
								Margin="{TemplateBinding Padding}"
								ContentSource="SelectedContent"
								SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Border>
                        <avalonDockControls:AnchorablePaneTabPanel
							x:Name="HeaderPanel"
							Grid.Row="1"
							Margin="0,0,0,2"
							Panel.ZIndex="1"
							IsItemsHost="true"
							KeyboardNavigation.TabIndex="1" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="{DynamicResource {x:Static dance:DanceResourceKey.CONTROL_OPACITY_DISABLED}}" />
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="{x:Type TabItem}">
                    <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
                    <Setter Property="IsEnabled" Value="{Binding IsEnabled}" />
                    <Setter Property="ToolTip" Value="{Binding ToolTip}" />
                    <Setter Property="Margin" Value="0,-1,0,0"></Setter>
                    <Setter Property="BorderBrush" Value="Transparent"></Setter>
                    <Setter Property="Background" Value="Transparent"></Setter>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type TabItem}">
                                <Grid SnapsToDevicePixels="true">
                                    <Border
										x:Name="Bd"
										Padding="{TemplateBinding Padding}"
										Background="{TemplateBinding Background}"
										BorderBrush="{TemplateBinding BorderBrush}"
										BorderThickness="1,0,1,1">
                                        <ContentPresenter
											x:Name="Content"
											HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
											VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
											ContentSource="Header"
											RecognizesAccessKey="True"
											SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                    </Border>
                                </Grid>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="Selector.IsSelected" Value="true">
                                        <Setter Property="Background" Value="White" />
                                        <Setter Property="Panel.ZIndex" Value="1" />
                                        <Setter Property="Margin" Value="0,-1,0,0" />
                                        <Setter Property="Foreground" Value="{DynamicResource ResourceKey={x:Static Member=dance:DanceResourceKey.BORDER_BRUSH_SELECTED}}"></Setter>
                                        <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey={x:Static Member=dance:DanceResourceKey.BORDER_BRUSH}}"></Setter>
                                    </Trigger>
                                    <MultiTrigger>
                                        <MultiTrigger.Conditions>
                                            <Condition Property="IsMouseOver" Value="true" />
                                            <Condition Property="Selector.IsSelected" Value="false" />
                                        </MultiTrigger.Conditions>
                                        <Setter Property="Background" Value="{DynamicResource ResourceKey={x:Static Member=dance:DanceResourceKey.BACKGROUND_BRUSH_MOUSE_OVER}}"></Setter>
                                        <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey={x:Static Member=dance:DanceResourceKey.BACKGROUND_BRUSH_MOUSE_OVER}}"></Setter>
                                        <Setter Property="Panel.ZIndex" Value="0" />
                                    </MultiTrigger>
                                    <Trigger Property="IsEnabled" Value="false">
                                        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TabControl}}, Path=Items.Count, FallbackValue=1}" Value="1">
                            <Setter Property="Visibility" Value="Collapsed" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Setter.Value>
        </Setter>

        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <avalonDockControls:LayoutAnchorableTabItem Model="{Binding}" />
                </DataTemplate>
            </Setter.Value>
        </Setter>

        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <avalonDockControls:LayoutAnchorableControl Model="{Binding}" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="AnchorablePaneTitleStyle" TargetType="{x:Type avalonDockControls:AnchorablePaneTitle}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <avalonDockControls:DropDownControlArea DropDownContextMenu="{Binding Model.Root.Manager.AnchorableContextMenu, RelativeSource={RelativeSource TemplatedParent}}" DropDownContextMenuDataContext="{Binding Path=LayoutItem, RelativeSource={RelativeSource TemplatedParent}}">
                                <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Left" Margin="3"
									Content="{Binding Model, RelativeSource={RelativeSource TemplatedParent}}"
									ContentTemplate="{Binding Model.Root.Manager.AnchorableTitleTemplate, RelativeSource={RelativeSource TemplatedParent}}"
									ContentTemplateSelector="{Binding Model.Root.Manager.AnchorableTitleTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}" />
                            </avalonDockControls:DropDownControlArea>

                            <avalonDockControls:DropDownButton
								Grid.Column="1"
								DropDownContextMenu="{Binding Model.Root.Manager.AnchorableContextMenu, RelativeSource={RelativeSource TemplatedParent}}"
								DropDownContextMenuDataContext="{Binding Path=LayoutItem, RelativeSource={RelativeSource TemplatedParent}}"
								Focusable="False"
								Style="{StaticResource AvalonDockToolToggleButton}"
								ToolTip="{x:Static avalonDockProperties:Resources.Anchorable_CxMenu_Hint}">
                                <Border Background="Transparent">
                                    <Path x:Name="PART_ImgPinMenu" Margin="0,0,0,1" Width="8" Height="8" Stretch="Uniform"
										  Data="{StaticResource PinMenu}"
										  Fill="{DynamicResource ResourceKey={x:Static Member=dance:DanceResourceKey.FOREGROUND_BRUSH_MARK}}"/>
                                </Border>
                            </avalonDockControls:DropDownButton>

                            <Button
								x:Name="PART_AutoHidePin"
								Grid.Column="2"
								Command="{Binding Path=LayoutItem.AutoHideCommand, RelativeSource={RelativeSource TemplatedParent}}"
								Focusable="False"
								Style="{StaticResource AvalonDockToolButton}"
								ToolTip="{x:Static avalonDockProperties:Resources.Anchorable_BtnAutoHide_Hint}"
								Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={avalonDockConverters:BoolToVisibilityConverter}}">
                                <Border Background="Transparent">
                                    <Path x:Name="PART_ImgAutoHidePin" UseLayoutRounding="True" RenderOptions.BitmapScalingMode="NearestNeighbor"
									      Width="11" Height="11" Data="{StaticResource PinAutoHide}" Stretch="Uniform"
										  Fill="{DynamicResource ResourceKey={x:Static Member=dance:DanceResourceKey.FOREGROUND_BRUSH_MARK}}"/>
                                </Border>
                            </Button>

                            <Button Margin="0,0,3,0"
								x:Name="PART_HidePin"
								Grid.Column="3"
								Command="{Binding Path=LayoutItem.HideCommand, RelativeSource={RelativeSource TemplatedParent}}"
								Focusable="False"
								Style="{StaticResource AvalonDockToolButton}"
								ToolTip="{x:Static avalonDockProperties:Resources.Anchorable_BtnClose_Hint}"
								Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={avalonDockConverters:BoolToVisibilityConverter}}">
                                <Border Background="Transparent">
                                    <Path x:Name="PART_ImgHidePin" Width="10" Height="10" VerticalAlignment="Center"
									      Data="{StaticResource PinClose}" Stretch="Uniform"
										  Fill="{DynamicResource ResourceKey={x:Static Member=dance:DanceResourceKey.FOREGROUND_BRUSH_MARK}}"/>
                                </Border>
                            </Button>

                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Model.IsAutoHidden, RelativeSource={RelativeSource Mode=Self}}" Value="True">
                            <Setter TargetName="PART_AutoHidePin" Property="LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="90" />
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Model.CanClose, RelativeSource={RelativeSource Mode=Self}}" Value="True">
                            <Setter TargetName="PART_HidePin" Property="Command" Value="{Binding Path=LayoutItem.CloseCommand, RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="PART_HidePin" Property="ToolTip" Value="{x:Static avalonDockProperties:Resources.Document_Close}" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Model.IsActive, RelativeSource={RelativeSource Mode=Self}}" Value="True">
                            <Setter Property="Background" Value="{DynamicResource ResourceKey={x:Static Member=dance:DanceResourceKey.BACKGROUND_BRUSH_SELECTED}}" />
                            <Setter Property="Foreground" Value="{DynamicResource ResourceKey={x:Static Member=dance:DanceResourceKey.FOREGROUND_BRUSH_SELECTED}}" />
                            <Setter Property="Fill" TargetName="PART_ImgPinMenu" Value="{DynamicResource ResourceKey={x:Static Member=dance:DanceResourceKey.FOREGROUND_BRUSH_SELECTED}}" />
                            <Setter Property="Fill" TargetName="PART_ImgAutoHidePin" Value="{DynamicResource ResourceKey={x:Static Member=dance:DanceResourceKey.FOREGROUND_BRUSH_SELECTED}}" />
                            <Setter Property="Fill" TargetName="PART_ImgHidePin" Value="{DynamicResource ResourceKey={x:Static Member=dance:DanceResourceKey.FOREGROUND_BRUSH_SELECTED}}" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type avalonDockControls:AnchorablePaneTitle}" BasedOn="{StaticResource AnchorablePaneTitleStyle}"/>

    <ControlTemplate x:Key="AnchorSideTemplate" TargetType="{x:Type avalonDockControls:LayoutAnchorSideControl}">
        <ItemsControl Background="{TemplateBinding Background}" ItemsSource="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Children}">
            <ItemsControl.ItemsPanel>
                <ItemsPanelTemplate>
                    <StackPanel Orientation="{Binding Path=Model.Side, RelativeSource={RelativeSource AncestorType={x:Type avalonDockControls:LayoutAnchorSideControl}, Mode=FindAncestor}, Converter={avalonDockConverters:AnchorSideToOrientationConverter}}" />
                </ItemsPanelTemplate>
            </ItemsControl.ItemsPanel>
        </ItemsControl>
    </ControlTemplate>

    <ControlTemplate x:Key="AnchorGroupTemplate" TargetType="{x:Type avalonDockControls:LayoutAnchorGroupControl}">
        <ItemsControl ItemsSource="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Children}">
            <ItemsControl.ItemsPanel>
                <ItemsPanelTemplate>
                    <StackPanel Orientation="Horizontal" />
                </ItemsPanelTemplate>
            </ItemsControl.ItemsPanel>
            <ItemsControl.Style>
                <Style TargetType="{x:Type ItemsControl}">
                    <Style.Resources>
                        <RotateTransform x:Key="LeftRightAnchorSideRotateTransform" Angle="90" />
                    </Style.Resources>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding Path=Model.Parent.Side, RelativeSource={RelativeSource TemplatedParent}}" Value="Left">
                            <Setter Property="LayoutTransform" Value="{StaticResource LeftRightAnchorSideRotateTransform}" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=Model.Parent.Side, RelativeSource={RelativeSource TemplatedParent}}" Value="Right">
                            <Setter Property="LayoutTransform" Value="{StaticResource LeftRightAnchorSideRotateTransform}" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </ItemsControl.Style>
        </ItemsControl>
    </ControlTemplate>

    <ControlTemplate x:Key="AnchorTemplate" TargetType="{x:Type avalonDockControls:LayoutAnchorControl}">
        <Border x:Name="border"
                Padding="3"
                Margin="0,3,3,0"
			    BorderThickness="0,0,0,5"
                Background="{DynamicResource ResourceKey={x:Static Member=dance:DanceResourceKey.BACKGROUND_BRUSH}}"
			    BorderBrush="{DynamicResource ResourceKey={x:Static Member=dance:DanceResourceKey.BORDER_BRUSH}}">
            <ContentPresenter x:Name="content" Opacity="0.7"
				Content="{Binding Model, RelativeSource={RelativeSource TemplatedParent}}"
				ContentTemplate="{Binding AnchorableHeaderTemplate, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type avalonDock:DockingManager}, Mode=FindAncestor}}"
				ContentTemplateSelector="{Binding AnchorableHeaderTemplateSelector, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type avalonDock:DockingManager}, Mode=FindAncestor}}" />
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Side" Value="Left">
                <Setter TargetName="border" Property="Margin" Value="0,5,5,0"></Setter>
                <Setter TargetName="border" Property="BorderThickness" Value="0,0,0,5"></Setter>
            </Trigger>
            <Trigger Property="Side" Value="Right">
                <Setter TargetName="border" Property="Margin" Value="0,0,5,5"></Setter>
                <Setter TargetName="border" Property="BorderThickness" Value="0,5,0,0"></Setter>
            </Trigger>
            <Trigger Property="Side" Value="Top">
                <Setter TargetName="border" Property="Margin" Value="0,5,5,0"></Setter>
                <Setter TargetName="border" Property="BorderThickness" Value="0,5,0,0"></Setter>
            </Trigger>
            <Trigger Property="Side" Value="Bottom">
                <Setter TargetName="border" Property="Margin" Value="0,5,5,0"></Setter>
                <Setter TargetName="border" Property="BorderThickness" Value="0,0,0,5"></Setter>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource ResourceKey={x:Static Member=dance:DanceResourceKey.BORDER_BRUSH_SELECTED}}"></Setter>
                <Setter TargetName="content" Property="Opacity" Value="1"></Setter>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="{x:Type avalonDockControls:OverlayWindow}" TargetType="{x:Type avalonDockControls:OverlayWindow}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type avalonDockControls:OverlayWindow}">
                    <Canvas x:Name="PART_DropTargetsContainer" Opacity="0.9">
                        <Path
							x:Name="PART_PreviewBox"
							Fill="{DynamicResource ResourceKey={x:Static Member=dance:DanceResourceKey.BACKGROUND_BRUSH_MOUSE_OVER}}"
							Stroke="{DynamicResource ResourceKey={x:Static Member=dance:DanceResourceKey.BORDER_BRUSH_SELECTED}}"
							StrokeThickness="2" />
                        <Grid x:Name="PART_DockingManagerDropTargets">
                            <Image
								x:Name="PART_DockingManagerDropTargetLeft"
								HorizontalAlignment="Left"
								VerticalAlignment="Center"
								Source="/AvalonDock;component/Themes/Generic/Images/DockLeft.PNG"
								Stretch="None" />
                            <Image
								x:Name="PART_DockingManagerDropTargetRight"
								HorizontalAlignment="Right"
								VerticalAlignment="Center"
								Source="/AvalonDock;component/Themes/Generic/Images/DockRight.PNG"
								Stretch="None" />
                            <Image
								x:Name="PART_DockingManagerDropTargetBottom"
								HorizontalAlignment="Center"
								VerticalAlignment="Bottom"
								Source="/AvalonDock;component/Themes/Generic/Images/DockBottom.PNG"
								Stretch="None" />
                            <Image
								x:Name="PART_DockingManagerDropTargetTop"
								HorizontalAlignment="Center"
								VerticalAlignment="Top"
								Source="/AvalonDock;component/Themes/Generic/Images/DockTop.PNG"
								Stretch="None" />
                        </Grid>
                        <Grid x:Name="PART_AnchorablePaneDropTargets">
                            <Grid
								Width="88"
								Height="88"
								HorizontalAlignment="Center"
								VerticalAlignment="Center">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition />
                                    <ColumnDefinition />
                                    <ColumnDefinition />
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition />
                                    <RowDefinition />
                                    <RowDefinition />
                                </Grid.RowDefinitions>
                                <Image
									Grid.RowSpan="3"
									Grid.ColumnSpan="3"
									Source="/AvalonDock;component/Themes/Generic/Images/DockPaneEmpty.PNG"
									Stretch="Uniform" />
                                <Border
									Name="PART_AnchorablePaneDropTargetTop"
									Grid.Row="0"
									Grid.Column="1">
                                    <Image Source="/AvalonDock;component/Themes/Generic/Images/InnerDockPaneTop.png" Stretch="None" />
                                </Border>
                                <Border
									Name="PART_AnchorablePaneDropTargetRight"
									Grid.Row="1"
									Grid.Column="2">
                                    <Image Source="/AvalonDock;component/Themes/Generic/Images/InnerDockPaneRight.png" Stretch="None" />
                                </Border>
                                <Border
									Name="PART_AnchorablePaneDropTargetBottom"
									Grid.Row="2"
									Grid.Column="1">
                                    <Image Source="/AvalonDock;component/Themes/Generic/Images/InnerDockPaneBottom.png" Stretch="None" />
                                </Border>
                                <Border
									Name="PART_AnchorablePaneDropTargetLeft"
									Grid.Row="1"
									Grid.Column="0">
                                    <Image Source="/AvalonDock;component/Themes/Generic/Images/InnerDockPaneLeft.png" Stretch="None" />
                                </Border>
                                <Border
									Name="PART_AnchorablePaneDropTargetInto"
									Grid.Row="1"
									Grid.Column="1">
                                    <Image Source="/AvalonDock;component/Themes/Generic/Images/InnerDockPaneInside.png" Stretch="None" />
                                </Border>
                            </Grid>
                        </Grid>
                        <Grid x:Name="PART_DocumentPaneDropTargets">
                            <Grid
								Width="88"
								Height="88"
								HorizontalAlignment="Center"
								VerticalAlignment="Center">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition />
                                    <ColumnDefinition />
                                    <ColumnDefinition />
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition />
                                    <RowDefinition />
                                    <RowDefinition />
                                </Grid.RowDefinitions>
                                <Image
									Grid.RowSpan="3"
									Grid.ColumnSpan="3"
									Source="/AvalonDock;component/Themes/Generic/Images/DockPaneEmpty.PNG"
									Stretch="Uniform" />
                                <Border
									Name="PART_DocumentPaneDropTargetTop"
									Grid.Row="0"
									Grid.Column="1">
                                    <Image Source="/AvalonDock;component/Themes/Generic/Images/InnerDockDocPaneTop.png" Stretch="None" />
                                </Border>
                                <Border
									Name="PART_DocumentPaneDropTargetRight"
									Grid.Row="1"
									Grid.Column="2">
                                    <Image Source="/AvalonDock;component/Themes/Generic/Images/InnerDockDocPaneRight.png" Stretch="None" />
                                </Border>
                                <Border
									Name="PART_DocumentPaneDropTargetBottom"
									Grid.Row="2"
									Grid.Column="1">
                                    <Image Source="/AvalonDock;component/Themes/Generic/Images/InnerDockDocPaneBottom.png" Stretch="None" />
                                </Border>
                                <Border
									Name="PART_DocumentPaneDropTargetLeft"
									Grid.Row="1"
									Grid.Column="0">
                                    <Image Source="/AvalonDock;component/Themes/Generic/Images/InnerDockDocPaneLeft.png" Stretch="None" />
                                </Border>
                                <Border
									Name="PART_DocumentPaneDropTargetInto"
									Grid.Row="1"
									Grid.Column="1">
                                    <Image Source="/AvalonDock;component/Themes/Generic/Images/InnerDockPaneInside.png" Stretch="None" />
                                </Border>
                            </Grid>
                        </Grid>
                    </Canvas>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <DataTemplate x:Key="DocumentHeaderTemplate">
        <TextBlock Text="{Binding Title}" TextTrimming="CharacterEllipsis" />
    </DataTemplate>

    <DataTemplate x:Key="AnchorableHeaderTemplate">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>
            <Image
				x:Name="icon"
				Source="{Binding IconSource, Converter={avalonDockConverters:NullToDoNothingConverter}}"
				Stretch="Uniform" />
            <TextBlock
				x:Name="title"
				Grid.Column="1"
				Margin="4,0,0,0"
				Text="{Binding Title}"
				TextTrimming="CharacterEllipsis" />
        </Grid>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding IconSource}" Value="{x:Null}">
                <Setter TargetName="title" Property="Margin" Value="0" />
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="DocumentTitleTemplate">
        <TextBlock Text="{Binding Title}" TextTrimming="CharacterEllipsis" />
    </DataTemplate>

    <DataTemplate x:Key="AnchorableTitleTemplate">
        <TextBlock Text="{Binding Title}" TextTrimming="CharacterEllipsis" />
    </DataTemplate>

    <DataTemplate x:Key="IconContentTemplate">
        <Image Source="{Binding IconSource, Converter={avalonDockConverters:NullToDoNothingConverter}}" Stretch="Uniform" />
    </DataTemplate>

    <ContextMenu x:Key="AnchorableContextMenu">
        <MenuItem Command="{Binding Path=FloatCommand}" Header="{x:Static avalonDockProperties:Resources.Anchorable_Float}" />
        <MenuItem Command="{Binding Path=DockCommand}" Header="{x:Static avalonDockProperties:Resources.Anchorable_Dock}" />
        <MenuItem Command="{Binding Path=DockAsDocumentCommand}" Header="{x:Static avalonDockProperties:Resources.Anchorable_DockAsDocument}" />
        <MenuItem Command="{Binding Path=AutoHideCommand}" Header="{x:Static avalonDockProperties:Resources.Anchorable_AutoHide}" />
        <MenuItem
			Command="{Binding Path=CloseCommand}"
			Header="{x:Static avalonDockProperties:Resources.Document_Close}"
			Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={avalonDockConverters:BoolToVisibilityConverter}}" />
        <MenuItem Command="{Binding Path=HideCommand}" Header="{x:Static avalonDockProperties:Resources.Anchorable_Hide}">
            <MenuItem.Visibility>
                <MultiBinding Converter="{avalonDockConverters:AnchorableContextMenuHideVisibilityConverter}">
                    <Binding
						Converter="{avalonDockConverters:BoolToVisibilityConverter}"
						Mode="OneWay"
						Path="IsEnabled"
						RelativeSource="{RelativeSource Self}" />
                    <Binding Path="CanClose" />
                </MultiBinding>
            </MenuItem.Visibility>
        </MenuItem>
    </ContextMenu>

    <ContextMenu x:Key="DocumentContextMenu">
        <MenuItem
			Command="{Binding Path=CloseCommand}"
			Header="{x:Static avalonDockProperties:Resources.Document_Close}"
			Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={avalonDockConverters:BoolToVisibilityConverter}}" />
        <MenuItem Command="{Binding Path=CloseAllButThisCommand}" Header="{x:Static avalonDockProperties:Resources.Document_CloseAllButThis}" />
        <MenuItem Command="{Binding Path=CloseAllCommand}" Header="{x:Static avalonDockProperties:Resources.Document_CloseAll}" />
        <MenuItem Command="{Binding Path=FloatCommand}" Header="{x:Static avalonDockProperties:Resources.Document_Float}" />
        <MenuItem Command="{Binding Path=DockAsDocumentCommand}" Header="{x:Static avalonDockProperties:Resources.Document_DockAsDocument}" />
        <MenuItem
			Command="{Binding Path=NewHorizontalTabGroupCommand}"
			Header="{x:Static avalonDockProperties:Resources.Document_NewHorizontalTabGroup}"
			Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={avalonDockConverters:BoolToVisibilityConverter}}" />
        <MenuItem
			Command="{Binding Path=NewVerticalTabGroupCommand}"
			Header="{x:Static avalonDockProperties:Resources.Document_NewVerticalTabGroup}"
			Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={avalonDockConverters:BoolToVisibilityConverter}}" />
        <MenuItem
			Command="{Binding Path=MoveToNextTabGroupCommand}"
			Header="{x:Static avalonDockProperties:Resources.Document_MoveToNextTabGroup}"
			Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={avalonDockConverters:BoolToVisibilityConverter}}" />
        <MenuItem
			Command="{Binding Path=MoveToPreviousTabGroupCommand}"
			Header="{x:Static avalonDockProperties:Resources.Document_MoveToPreviousTabGroup}"
			Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={avalonDockConverters:BoolToVisibilityConverter}}" />
    </ContextMenu>

    <!--  LayoutGridResizerControl  -->
    <Style x:Key="{x:Type avalonDockControls:LayoutGridResizerControl}" TargetType="{x:Type avalonDockControls:LayoutGridResizerControl}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BackgroundWhileDragging" Value="{DynamicResource ResourceKey={x:Static Member=dance:DanceResourceKey.BACKGROUND_BRUSH_SELECTED}}"></Setter>
        <Setter Property="OpacityWhileDragging" Value="{DynamicResource ResourceKey={x:Static Member=dance:DanceResourceKey.CONTROL_OPACITY_DISABLED}}"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutGridResizerControl}">
                    <Border Background="{TemplateBinding Background}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  DockingManager  -->
    <Style x:Key="{x:Type avalonDock:DockingManager}" TargetType="{x:Type avalonDock:DockingManager}">
        <Setter Property="DocumentPaneControlStyle" Value="{StaticResource DocumentPaneControlStyle}" />
        <Setter Property="AnchorablePaneControlStyle" Value="{StaticResource AnchorablePaneControlStyle}" />
        <Setter Property="AnchorSideTemplate" Value="{StaticResource AnchorSideTemplate}" />
        <Setter Property="AnchorGroupTemplate" Value="{StaticResource AnchorGroupTemplate}" />
        <Setter Property="AnchorTemplate" Value="{StaticResource AnchorTemplate}" />
        <Setter Property="DocumentHeaderTemplate" Value="{StaticResource DocumentHeaderTemplate}" />
        <Setter Property="AnchorableHeaderTemplate" Value="{StaticResource AnchorableHeaderTemplate}" />
        <Setter Property="DocumentTitleTemplate" Value="{StaticResource DocumentTitleTemplate}" />
        <Setter Property="AnchorableTitleTemplate" Value="{StaticResource AnchorableTitleTemplate}" />
        <Setter Property="AnchorableContextMenu" Value="{DynamicResource AnchorableContextMenu}" />
        <Setter Property="DocumentContextMenu" Value="{DynamicResource DocumentContextMenu}" />
        <Setter Property="DocumentPaneMenuItemHeaderTemplate" Value="{StaticResource DocumentHeaderTemplate}" />
        <Setter Property="IconContentTemplate" Value="{StaticResource IconContentTemplate}" />
        <Setter Property="GridSplitterVerticalStyle" Value="{StaticResource {x:Type avalonDockControls:LayoutGridResizerControl}}"></Setter>
        <Setter Property="GridSplitterHorizontalStyle" Value="{StaticResource {x:Type avalonDockControls:LayoutGridResizerControl}}"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type avalonDock:DockingManager}">
                    <Border
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid FlowDirection="LeftToRight">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="*" />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <ContentPresenter
								Grid.Row="1"
								Grid.Column="1"
								Content="{TemplateBinding LayoutRootPanel}" />
                            <ContentPresenter
								Grid.Row="0"
								Grid.RowSpan="3"
								Grid.Column="2"
								Content="{TemplateBinding RightSidePanel}" />
                            <ContentPresenter
								Grid.Row="0"
								Grid.RowSpan="3"
								Grid.Column="0"
								Content="{TemplateBinding LeftSidePanel}" />
                            <ContentPresenter
								Grid.Row="0"
								Grid.Column="0"
								Grid.ColumnSpan="3"
								Content="{TemplateBinding TopSidePanel}" />
                            <ContentPresenter
								Grid.Row="2"
								Grid.Column="0"
								Grid.ColumnSpan="3"
								Content="{TemplateBinding BottomSidePanel}" />
                            <ContentPresenter
								x:Name="PART_AutoHideArea"
								Grid.Row="1"
								Grid.Column="1"
								HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
								VerticalAlignment="{TemplateBinding VerticalAlignment}"
								Content="{TemplateBinding AutoHideWindow}" />
                            <!--    -->
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type avalonDockControls:LayoutDocumentControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutDocumentControl}">
                    <Border
                        Focusable="True"
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}">
                        <ContentPresenter Margin="6"
							Content="{Binding LayoutItem.View, RelativeSource={RelativeSource TemplatedParent}}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type avalonDockControls:LayoutDocumentTabItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutDocumentTabItem}">
                    <avalonDockControls:DropDownControlArea DropDownContextMenu="{Binding Root.Manager.DocumentContextMenu}" DropDownContextMenuDataContext="{Binding LayoutItem, RelativeSource={RelativeSource TemplatedParent}}">
                        <Border 
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <Border Grid.ColumnSpan="3" Background="Transparent" />
                                <ContentPresenter Margin="0,0,10,0"
									Content="{Binding Model, RelativeSource={RelativeSource TemplatedParent}}"
									ContentTemplate="{Binding DocumentHeaderTemplate, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type avalonDock:DockingManager}, Mode=FindAncestor}}"
									ContentTemplateSelector="{Binding DocumentHeaderTemplateSelector, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type avalonDock:DockingManager}, Mode=FindAncestor}}" />

                                <Button
									x:Name="DocumentCloseButton"
									Grid.Column="2"
                                    Width="20" Height="16"
									Command="{Binding Path=LayoutItem.CloseCommand, RelativeSource={RelativeSource TemplatedParent}}"
									Style="{StaticResource AvalonDockToolButton}"
									ToolTip="{x:Static avalonDockProperties:Resources.Document_Close}"
									Visibility="Hidden">
                                    <Path x:Name="PART_ImgPinClose" Width="10" Height="10" VerticalAlignment="Center" HorizontalAlignment="Center"
                                          Data="{StaticResource PinClose}" Stretch="Uniform"
										  Fill="{DynamicResource {x:Static Member=dance:DanceResourceKey.FOREGROUND_BRUSH_MARK}}"/>
                                </Button>
                            </Grid>
                        </Border>
                    </avalonDockControls:DropDownControlArea>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsSelected}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="DocumentCloseButton" Property="Visibility" Value="Visible" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource TemplatedParent}}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="DocumentCloseButton" Property="Visibility" Value="Visible" />
                        </MultiDataTrigger>
                        <!--BD: 17.08.2020 use HideCommand if CanClose=false but CanHide=true-->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=CanClose}" Value="false" />
                                <Condition Binding="{Binding Path=CanHide}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="DocumentCloseButton" Property="Command" Value="{Binding Path=LayoutItem.HideCommand, RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="DocumentCloseButton" Property="ToolTip" Value="{x:Static avalonDockProperties:Resources.Anchorable_Hide}" />
                        </MultiDataTrigger>
                        <!--BD: 17.08.2020 hide button if both CanClose=false and CanHide=false-->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=CanClose}" Value="false" />
                                <Condition Binding="{Binding Path=CanHide}" Value="false" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="DocumentCloseButton" Property="Visibility" Value="Collapsed" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type avalonDockControls:LayoutAnchorableTabItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutAnchorableTabItem}">
                    <avalonDockControls:DropDownControlArea DropDownContextMenu="{Binding Root.Manager.AnchorableContextMenu}" DropDownContextMenuDataContext="{Binding LayoutItem, RelativeSource={RelativeSource TemplatedParent}}">
                        <Border
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}">
                            <Grid>
                                <ContentPresenter
									Content="{Binding Model, RelativeSource={RelativeSource TemplatedParent}}"
									ContentTemplate="{Binding AnchorableHeaderTemplate, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type avalonDock:DockingManager}, Mode=FindAncestor}}"
									ContentTemplateSelector="{Binding AnchorableHeaderTemplateSelector, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type avalonDock:DockingManager}, Mode=FindAncestor}}" />
                                <avalonDockControls:DropDownControlArea
									Grid.Column="0"
									DropDownContextMenu="{Binding Model.Root.Manager.AnchorableContextMenu, RelativeSource={RelativeSource TemplatedParent}}"
									DropDownContextMenuDataContext="{Binding Path=Model, RelativeSource={RelativeSource TemplatedParent}}" />
                            </Grid>
                        </Border>
                    </avalonDockControls:DropDownControlArea>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type avalonDockControls:LayoutAnchorableControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutAnchorableControl}">
                    <Border x:Name="Bd"
                        Focusable="True"
						Background="{TemplateBinding Background}"
                        BorderBrush="{DynamicResource ResourceKey={x:Static Member=dance:DanceResourceKey.BORDER_BRUSH}}"
						KeyboardNavigation.TabNavigation="Cycle">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <Border x:Name="Header">
                                <avalonDockControls:AnchorablePaneTitle Model="{Binding Model, RelativeSource={RelativeSource TemplatedParent}}" />
                            </Border>

                            <!--
								Added ContentTemplate and ContentTemplateSelector
								https://github.com/xceedsoftware/wpftoolkit/issues/1525
							-->
                            <ContentPresenter
								Grid.Row="1" Margin="3"
								Content="{Binding LayoutItem.View, RelativeSource={RelativeSource TemplatedParent}}"
								ContentTemplate="{Binding LayoutItem.View.ContentTemplate, RelativeSource={RelativeSource TemplatedParent}}"
								ContentTemplateSelector="{Binding LayoutItem.View.ContentTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}"
								FlowDirection="{TemplateBinding FlowDirection}" />

                            <!--<ContentPresenter
                                FlowDirection="{TemplateBinding FlowDirection}"
                                Content="{Binding Model.Content, RelativeSource={RelativeSource TemplatedParent}}"
                                ContentTemplate="{Binding LayoutItemTemplate, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type avalonDock:DockingManager}, Mode=FindAncestor}}"
                                ContentTemplateSelector="{Binding LayoutItemTemplateSelector, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type avalonDock:DockingManager}, Mode=FindAncestor}}"
                                Grid.Row="1"/>-->
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <!--
								Hide the title if the control is directly hosted in floating window
								The floating window control will show the title if there is only one control to host
								without any other LayoutAnchorableControl
							-->
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Model.IsFloating}" Value="True" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Model.Parent.IsDirectlyHostedInFloatingWindow}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="Header" Property="Visibility" Value="Collapsed" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <!--
								Also hide the title, if model cannot be bound which can happen when using virtualization
								See Issue #148 Drop Down Menu for LayoutAnchorables is not correct with Virtualization
							-->
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Model}" Value="{x:Null}" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="Header" Property="Visibility" Value="Collapsed" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type avalonDockControls:LayoutDocumentFloatingWindowControl}" TargetType="{x:Type avalonDockControls:LayoutDocumentFloatingWindowControl}">
        <Setter Property="Background" Value="{DynamicResource {x:Static Member=dance:DanceResourceKey.BACKGROUND_BRUSH}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static Member=dance:DanceResourceKey.BORDER_BRUSH}}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="shell:WindowChrome.WindowChrome">
            <Setter.Value>
                <shell:WindowChrome
					CaptionHeight="30"
					CornerRadius="0"
					GlassFrameThickness="0"
					ResizeBorderThickness="10"
					ShowSystemMenu="False" />
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutDocumentFloatingWindowControl}">
                    <Grid Background="{TemplateBinding Background}">
                        <Border
							x:Name="WindowBorder"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" MinHeight="30" />
                                    <!--  https://github.com/xceedsoftware/wpftoolkit/issues/1203  -->
                                    <RowDefinition Height="*" />
                                </Grid.RowDefinitions>
                                <Rectangle x:Name="HeaderBG" Fill="{TemplateBinding Background}"></Rectangle>

                                <Grid UseLayoutRounding="True">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="Auto" />
                                    </Grid.ColumnDefinitions>
                                    <Border Visibility="{Binding Path=Model.IsSinglePane, RelativeSource={RelativeSource TemplatedParent}, Converter={avalonDockConverters:BoolToVisibilityConverter}}">
                                        <avalonDockControls:DropDownControlArea x:Name="Header" DropDownContextMenu="{Binding Model.Root.Manager.DocumentContextMenu, RelativeSource={RelativeSource TemplatedParent}}" DropDownContextMenuDataContext="{Binding Path=SingleContentLayoutItem, RelativeSource={RelativeSource TemplatedParent}}">
                                            <ContentPresenter VerticalAlignment="Center" Margin="10,3,0,3"
												Content="{Binding Model.SinglePane.SelectedContent, RelativeSource={RelativeSource TemplatedParent}}"
												ContentTemplate="{Binding Model.Root.Manager.DocumentTitleTemplate, RelativeSource={RelativeSource TemplatedParent}}"
												ContentTemplateSelector="{Binding Model.Root.Manager.DocumentTitleTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}" />
                                        </avalonDockControls:DropDownControlArea>
                                    </Border>
                                    <Button
										Grid.Column="1"
										shell:WindowChrome.IsHitTestVisibleInChrome="True"
										Command="{x:Static shell:SystemCommands.MaximizeWindowCommand}"
										CommandParameter="{Binding RelativeSource={RelativeSource TemplatedParent}}"
										Focusable="False"
                                        Width="20"
										Height="20" 
										Style="{StaticResource AvalonDockToolButton}"
										ToolTip="{x:Static avalonDockProperties:Resources.Window_Maximize}"
										Visibility="{Binding IsMaximized, RelativeSource={RelativeSource TemplatedParent}, Converter={avalonDockConverters:InverseBoolToVisibilityConverter}}">
                                        <Path x:Name="PART_ImgPinMaximize" Width="9" Height="9" VerticalAlignment="Center" Data="{StaticResource PinMaximize}" Stretch="Uniform"
											  Fill="{DynamicResource {x:Static Member=dance:DanceResourceKey.FOREGROUND_BRUSH_MARK}}" />
                                    </Button>

                                    <Button
										Grid.Column="1"
										shell:WindowChrome.IsHitTestVisibleInChrome="True"
										Command="{x:Static shell:SystemCommands.RestoreWindowCommand}"
										CommandParameter="{Binding RelativeSource={RelativeSource TemplatedParent}}"
										Focusable="False"
                                        Width="20"
										Height="20" 
										Style="{StaticResource AvalonDockToolButton}"
										ToolTip="{x:Static avalonDockProperties:Resources.Window_Restore}"
										Visibility="{Binding IsMaximized, RelativeSource={RelativeSource TemplatedParent}, Converter={avalonDockConverters:BoolToVisibilityConverter}}">
                                        <Path x:Name="PART_ImgPinRestore" Width="10" Height="10" Margin="1,1,0,0" VerticalAlignment="Center" Data="{StaticResource PinRestore}" Stretch="Uniform"
											  Fill="{DynamicResource {x:Static Member=dance:DanceResourceKey.FOREGROUND_BRUSH_MARK}}" />
                                    </Button>

                                    <Button
										Grid.Column="2"
										shell:WindowChrome.IsHitTestVisibleInChrome="True"
										Command="{Binding Path=CloseWindowCommand, RelativeSource={RelativeSource TemplatedParent}}"
										Focusable="False"
                                        Width="20"
										Height="20" Margin="0,0,3,0"
										Style="{StaticResource AvalonDockToolButton}"
										ToolTip="{x:Static avalonDockProperties:Resources.Document_Close}"
										Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={avalonDockConverters:BoolToVisibilityConverter}}">
                                        <Path x:Name="PART_ImgPinClose" Width="10" Height="10" Margin="1,0,0,1" VerticalAlignment="Center" Data="{StaticResource PinClose}" Stretch="Uniform"
											  Fill="{DynamicResource {x:Static Member=dance:DanceResourceKey.FOREGROUND_BRUSH_MARK}}" />
                                    </Button>
                                </Grid>
                                <ContentPresenter Grid.Row="1" Content="{TemplateBinding Content}" Margin="3" />
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="WindowState" Value="Maximized">
                            <Setter TargetName="WindowBorder" Property="Padding" Value="3" />
                        </Trigger>
                        <DataTrigger Binding="{Binding IsActive, RelativeSource={RelativeSource Self}}" Value="True">
                            <Setter TargetName="WindowBorder" Property="BorderBrush" Value="{DynamicResource {x:Static Member=dance:DanceResourceKey.BORDER_BRUSH_SELECTED}}" />
                            <Setter TargetName="HeaderBG" Property="Fill" Value="{DynamicResource {x:Static Member=dance:DanceResourceKey.BORDER_BRUSH_SELECTED}}" />
                            <Setter TargetName="Header" Property="Foreground" Value="{DynamicResource {x:Static Member=dance:DanceResourceKey.FOREGROUND_BRUSH_SELECTED}}" />

                            <Setter TargetName="PART_ImgPinMaximize" Property="Fill" Value="{DynamicResource {x:Static Member=dance:DanceResourceKey.FOREGROUND_BRUSH_SELECTED}}" />
                            <Setter TargetName="PART_ImgPinRestore" Property="Fill" Value="{DynamicResource {x:Static Member=dance:DanceResourceKey.FOREGROUND_BRUSH_SELECTED}}" />
                            <Setter TargetName="PART_ImgPinClose" Property="Fill" Value="{DynamicResource {x:Static Member=dance:DanceResourceKey.FOREGROUND_BRUSH_SELECTED}}" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type avalonDockControls:LayoutAnchorableFloatingWindowControl}" TargetType="{x:Type avalonDockControls:LayoutAnchorableFloatingWindowControl}">
        <Setter Property="Background" Value="{DynamicResource {x:Static Member=dance:DanceResourceKey.BACKGROUND_BRUSH}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static Member=dance:DanceResourceKey.BORDER_BRUSH}}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="shell:WindowChrome.WindowChrome">
            <Setter.Value>
                <shell:WindowChrome
					CaptionHeight="30"
					CornerRadius="0"
					GlassFrameThickness="0"
					ResizeBorderThickness="10"
					ShowSystemMenu="False" />
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutAnchorableFloatingWindowControl}">
                    <Grid Background="{TemplateBinding Background}">
                        <Border
							x:Name="WindowBorder"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" MinHeight="30" />
                                    <!--  https://github.com/xceedsoftware/wpftoolkit/issues/1203  -->
                                    <RowDefinition Height="*" />
                                </Grid.RowDefinitions>
                                <Grid UseLayoutRounding="True">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="Auto" />
                                    </Grid.ColumnDefinitions>

                                    <Rectangle x:Name="HeaderBG" Grid.ColumnSpan="4" Fill="{TemplateBinding Background}"></Rectangle>
                                    <Border Visibility="{Binding Path=Model.IsSinglePane, RelativeSource={RelativeSource TemplatedParent}, Converter={avalonDockConverters:BoolToVisibilityConverter}}">
                                        <avalonDockControls:DropDownControlArea x:Name="Header" DropDownContextMenu="{Binding Model.Root.Manager.AnchorableContextMenu, RelativeSource={RelativeSource TemplatedParent}}" DropDownContextMenuDataContext="{Binding Path=SingleContentLayoutItem, RelativeSource={RelativeSource TemplatedParent}}">
                                            <ContentPresenter VerticalAlignment="Center" Margin="10,3,0,3"
												Content="{Binding Model.SinglePane.SelectedContent, RelativeSource={RelativeSource TemplatedParent}}"
												ContentTemplate="{Binding Model.Root.Manager.AnchorableTitleTemplate, RelativeSource={RelativeSource TemplatedParent}}"
												ContentTemplateSelector="{Binding Model.Root.Manager.AnchorableTitleTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}" />
                                        </avalonDockControls:DropDownControlArea>
                                    </Border>

                                    <avalonDockControls:DropDownButton
										x:Name="SinglePaneContextMenu"
										Grid.Column="1"
                                        Width="20"
										Height="20"
										shell:WindowChrome.IsHitTestVisibleInChrome="True"
										DropDownContextMenu="{Binding Model.Root.Manager.AnchorableContextMenu, RelativeSource={RelativeSource TemplatedParent}}"
										DropDownContextMenuDataContext="{Binding Path=SingleContentLayoutItem, RelativeSource={RelativeSource TemplatedParent}}"
										Focusable="False"
										Style="{StaticResource AvalonDockToolToggleButton}"
										ToolTip="{x:Static avalonDockProperties:Resources.Anchorable_CxMenu_Hint}"
										Visibility="{Binding Path=Model.IsSinglePane, RelativeSource={RelativeSource TemplatedParent}, Converter={avalonDockConverters:BoolToVisibilityConverter}}">
                                        <Path x:Name="PART_ImgPinMenu" Margin="0,0,0,1" Width="8" Height="8" Data="{StaticResource PinMenu}" Stretch="Uniform"
											  Fill="{DynamicResource {x:Static Member=dance:DanceResourceKey.FOREGROUND_BRUSH_MARK}}" />
                                    </avalonDockControls:DropDownButton>

                                    <Button
										Grid.Column="2"
                                        Width="20"
										Height="20"
										shell:WindowChrome.IsHitTestVisibleInChrome="True"
										Command="{x:Static shell:SystemCommands.MaximizeWindowCommand}"
										CommandParameter="{Binding RelativeSource={RelativeSource TemplatedParent}}"
										Focusable="False"
										Style="{StaticResource AvalonDockToolButton}"
										ToolTip="{x:Static avalonDockProperties:Resources.Window_Maximize}"
										Visibility="{Binding IsMaximized, RelativeSource={RelativeSource TemplatedParent}, Converter={avalonDockConverters:InverseBoolToVisibilityConverter}}">
                                        <Path x:Name="PART_ImgPinMaximize" Width="9" Height="9" VerticalAlignment="Center" Data="{StaticResource PinMaximize}" Stretch="Uniform"
											  Fill="{DynamicResource {x:Static Member=dance:DanceResourceKey.FOREGROUND_BRUSH_MARK}}" />
                                    </Button>

                                    <Button
										Grid.Column="2"
                                        Width="20"
										Height="20"
										shell:WindowChrome.IsHitTestVisibleInChrome="True"
										Command="{x:Static shell:SystemCommands.RestoreWindowCommand}"
										CommandParameter="{Binding RelativeSource={RelativeSource TemplatedParent}}"
										Focusable="False"
										Style="{StaticResource AvalonDockToolButton}"
										ToolTip="{x:Static avalonDockProperties:Resources.Window_Restore}"
										Visibility="{Binding IsMaximized, RelativeSource={RelativeSource TemplatedParent}, Converter={avalonDockConverters:BoolToVisibilityConverter}}">
                                        <Path x:Name="PART_ImgPinRestore" Width="10" Height="10" Margin="1,1,0,0" VerticalAlignment="Center" Data="{StaticResource PinRestore}" Stretch="Uniform"
											  Fill="{DynamicResource {x:Static Member=dance:DanceResourceKey.FOREGROUND_BRUSH_MARK}}" />
                                    </Button>

                                    <Button
										x:Name="CloseButton"
										Grid.Column="3"
                                        Width="20"
										Height="20" Margin="0,0,3,0"
										shell:WindowChrome.IsHitTestVisibleInChrome="True"
										Command="{Binding HideWindowCommand, RelativeSource={RelativeSource TemplatedParent}}"
										Focusable="False"
										Style="{StaticResource AvalonDockToolButton}"
										ToolTip="{x:Static avalonDockProperties:Resources.Anchorable_BtnClose_Hint}"
										Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={avalonDockConverters:BoolToVisibilityConverter}}">
                                        <Path x:Name="PART_ImgPinClose" Width="10" Height="10" Margin="1,0,0,1" VerticalAlignment="Center" Data="{StaticResource PinClose}" Stretch="Uniform"
											  Fill="{DynamicResource {x:Static Member=dance:DanceResourceKey.FOREGROUND_BRUSH_MARK}}" />
                                    </Button>
                                </Grid>
                                <ContentPresenter Grid.Row="1" Content="{TemplateBinding Content}" Margin="5,3,5,3" />
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="WindowState" Value="Maximized">
                            <Setter TargetName="WindowBorder" Property="Padding" Value="3" />
                        </Trigger>
                        <DataTrigger Binding="{Binding Model.SinglePane.SelectedContent.IsActive, RelativeSource={RelativeSource Self}}" Value="True">
                            <Setter TargetName="WindowBorder" Property="BorderBrush" Value="{DynamicResource {x:Static Member=dance:DanceResourceKey.BORDER_BRUSH_SELECTED}}" />
                            <Setter TargetName="HeaderBG" Property="Fill" Value="{DynamicResource {x:Static Member=dance:DanceResourceKey.BORDER_BRUSH_SELECTED}}" />
                            <Setter TargetName="Header" Property="Foreground" Value="{DynamicResource {x:Static Member=dance:DanceResourceKey.FOREGROUND_BRUSH_SELECTED}}" />

                            <Setter TargetName="PART_ImgPinMenu" Property="Fill" Value="{DynamicResource {x:Static Member=dance:DanceResourceKey.FOREGROUND_BRUSH_SELECTED}}" />
                            <Setter TargetName="PART_ImgPinMaximize" Property="Fill" Value="{DynamicResource {x:Static Member=dance:DanceResourceKey.FOREGROUND_BRUSH_SELECTED}}" />
                            <Setter TargetName="PART_ImgPinRestore" Property="Fill" Value="{DynamicResource {x:Static Member=dance:DanceResourceKey.FOREGROUND_BRUSH_SELECTED}}" />
                            <Setter TargetName="PART_ImgPinClose" Property="Fill" Value="{DynamicResource {x:Static Member=dance:DanceResourceKey.FOREGROUND_BRUSH_SELECTED}}" />

                        </DataTrigger>
                        <DataTrigger Binding="{Binding Model.SinglePane.SelectedContent.CanClose, RelativeSource={RelativeSource Mode=Self}}" Value="True">
                            <Setter TargetName="CloseButton" Property="Command" Value="{Binding CloseWindowCommand, RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="CloseButton" Property="ToolTip" Value="{x:Static avalonDockProperties:Resources.Document_Close}" />

                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type avalonDockControls:LayoutAutoHideWindowControl}" TargetType="{x:Type avalonDockControls:LayoutAutoHideWindowControl}">
        <Setter Property="Background" Value="{DynamicResource ResourceKey={x:Static Member=dance:DanceResourceKey.BACKGROUND_BRUSH}}" />
        <Setter Property="AnchorableStyle">
            <Setter.Value>
                <Style TargetType="avalonDockControls:LayoutAnchorableControl">
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutAnchorableControl}">
                                <Border Background="{TemplateBinding Background}"
                                        BorderBrush="{DynamicResource ResourceKey={x:Static Member=dance:DanceResourceKey.BORDER_BRUSH}}"
                                        BorderThickness="1"
						                KeyboardNavigation.TabNavigation="Cycle">
                                    <Grid>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto" />
                                            <RowDefinition Height="*" />
                                        </Grid.RowDefinitions>
                                        <Border x:Name="Header">
                                            <avalonDockControls:AnchorablePaneTitle Model="{Binding Model, RelativeSource={RelativeSource TemplatedParent}}" />
                                        </Border>

                                        <!--
								            Added ContentTemplate and ContentTemplateSelector
								            https://github.com/xceedsoftware/wpftoolkit/issues/1525
							            -->
                                        <ContentPresenter
								            Grid.Row="1" Margin="3"
								            Content="{Binding LayoutItem.View, RelativeSource={RelativeSource TemplatedParent}}"
								            ContentTemplate="{Binding LayoutItem.View.ContentTemplate, RelativeSource={RelativeSource TemplatedParent}}"
								            ContentTemplateSelector="{Binding LayoutItem.View.ContentTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}"
								            FlowDirection="{TemplateBinding FlowDirection}" />

                                        <!--<ContentPresenter
                                                FlowDirection="{TemplateBinding FlowDirection}"
                                                Content="{Binding Model.Content, RelativeSource={RelativeSource TemplatedParent}}"
                                                ContentTemplate="{Binding LayoutItemTemplate, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type avalonDock:DockingManager}, Mode=FindAncestor}}"
                                                ContentTemplateSelector="{Binding LayoutItemTemplateSelector, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type avalonDock:DockingManager}, Mode=FindAncestor}}"
                                                Grid.Row="1"/>-->
                                    </Grid>
                                </Border>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type avalonDockControls:NavigatorWindow}" TargetType="{x:Type avalonDockControls:NavigatorWindow}">
        <Setter Property="Background" Value="{DynamicResource {x:Static Member=dance:DanceResourceKey.BACKGROUND_BRUSH_MOUSE_OVER}}" />
        <Setter Property="SizeToContent" Value="WidthAndHeight" />
        <Setter Property="ResizeMode" Value="NoResize" />
        <Setter Property="shell:WindowChrome.WindowChrome">
            <Setter.Value>
                <shell:WindowChrome
					CaptionHeight="16"
					CornerRadius="3,3,3,3"
					GlassFrameThickness="4"
					ResizeBorderThickness="10" />
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type avalonDockControls:NavigatorWindow}">
                    <Grid>
                        <Border
							x:Name="WindowBorder"
							Background="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"
							BorderBrush="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"
							BorderThickness="3">
                            <Grid Margin="5">
                                <Grid.RowDefinitions>
                                    <RowDefinition MinHeight="54" />
                                    <RowDefinition Height="*" />
                                    <RowDefinition MinHeight="42" />
                                </Grid.RowDefinitions>

                                <Grid>
                                    <Grid.RowDefinitions>
                                        <RowDefinition />
                                        <RowDefinition />
                                    </Grid.RowDefinitions>
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto" />
                                            <ColumnDefinition />
                                        </Grid.ColumnDefinitions>
                                        <Image Source="{Binding SelectedDocument.LayoutElement.IconSource, Converter={avalonDockConverters:NullToDoNothingConverter}}" Stretch="None" />
                                        <TextBlock
											x:Name="selectedElementTitle"
											Grid.Column="1"
											Margin="4,0,0,0"
											VerticalAlignment="Center"
											FontWeight="Bold"
											Text="{Binding SelectedDocument.LayoutElement.Title}"
											TextTrimming="CharacterEllipsis" />
                                    </Grid>
                                    <TextBlock
										x:Name="selectedElementDescription"
										VerticalAlignment="Center"
										Text="{Binding SelectedDocument.LayoutElement.Description}"
										TextTrimming="CharacterEllipsis" />
                                </Grid>

                                <Grid Grid.Row="1">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition />
                                    </Grid.ColumnDefinitions>
                                    <Grid Margin="5">
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto" />
                                            <RowDefinition />
                                        </Grid.RowDefinitions>
                                        <TextBlock
											Margin="0,3,0,4"
											FontWeight="Bold"
											Text="{x:Static avalonDockProperties:Resources.Active_ToolWindows}" />
                                        <ListBox
											x:Name="PART_AnchorableListBox"
											AutomationProperties.Name="{x:Static avalonDockProperties:Resources.Active_ToolWindows}"
											Grid.Row="1"
											MaxHeight="400"
											Background="Transparent"
											BorderThickness="0"
											FocusVisualStyle="{x:Null}"
											ItemsSource="{Binding Anchorables}"
											SelectedItem="{Binding SelectedAnchorable, Mode=TwoWay}">
                                            <ListBox.ItemContainerStyle>
                                                <Style TargetType="ListBoxItem">
                                                    <Setter Property="Cursor" Value="Hand" />
                                                    <Style.Triggers>
                                                        <Trigger Property="IsMouseOver" Value="True">
                                                            <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                                                            <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                                                        </Trigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </ListBox.ItemContainerStyle>
                                            <ListBox.ItemTemplate>
                                                <DataTemplate>
                                                    <Grid>
                                                        <Grid.ColumnDefinitions>
                                                            <ColumnDefinition Width="Auto" />
                                                            <ColumnDefinition />
                                                        </Grid.ColumnDefinitions>
                                                        <Image Source="{Binding LayoutElement.IconSource, Converter={avalonDockConverters:NullToDoNothingConverter}}" Stretch="None" />
                                                        <TextBlock
															Grid.Column="1"
															Margin="4,2,0,2"
															Text="{Binding LayoutElement.Title}"
															TextTrimming="CharacterEllipsis" />
                                                    </Grid>
                                                </DataTemplate>
                                            </ListBox.ItemTemplate>
                                        </ListBox>
                                    </Grid>
                                    <Grid Grid.Column="1" Margin="5">
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto" />
                                            <RowDefinition />
                                        </Grid.RowDefinitions>
                                        <TextBlock
											Margin="0,3,0,4"
											FontWeight="Bold"
											Text="{x:Static avalonDockProperties:Resources.Active_Files}" />
                                        <ListBox
											x:Name="PART_DocumentListBox"
											AutomationProperties.Name="{x:Static avalonDockProperties:Resources.Active_Files}"
											Grid.Row="1"
											MaxHeight="400"
											Background="Transparent"
											BorderThickness="0"
											FocusVisualStyle="{x:Null}"
											ItemsSource="{Binding Documents}"
											SelectedItem="{Binding SelectedDocument, Mode=TwoWay}">
                                            <ListBox.ItemContainerStyle>
                                                <Style TargetType="ListBoxItem">
                                                    <Setter Property="Cursor" Value="Hand" />
                                                    <Style.Triggers>
                                                        <Trigger Property="IsMouseOver" Value="True">
                                                            <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                                                            <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                                                        </Trigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </ListBox.ItemContainerStyle>
                                            <ListBox.ItemTemplate>
                                                <DataTemplate>
                                                    <Grid>
                                                        <Grid.ColumnDefinitions>
                                                            <ColumnDefinition Width="Auto" />
                                                            <ColumnDefinition />
                                                        </Grid.ColumnDefinitions>
                                                        <Image Source="{Binding LayoutElement.IconSource, Converter={avalonDockConverters:NullToDoNothingConverter}}" Stretch="None" />
                                                        <TextBlock
															Grid.Column="1"
															Margin="4,2,0,2"
															Text="{Binding LayoutElement.Title}"
															TextTrimming="CharacterEllipsis" />
                                                    </Grid>
                                                </DataTemplate>
                                            </ListBox.ItemTemplate>
                                            <ListBox.ItemsPanel>
                                                <ItemsPanelTemplate>
                                                    <WrapPanel Orientation="Vertical" />
                                                </ItemsPanelTemplate>
                                            </ListBox.ItemsPanel>
                                        </ListBox>
                                    </Grid>
                                </Grid>

                                <Grid Grid.Row="2">
                                    <TextBlock VerticalAlignment="Center" Text="{Binding SelectedDocument.LayoutElement.ToolTip}" />
                                </Grid>
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="SelectedDocument" Value="{x:Null}">
                            <Setter TargetName="selectedElementTitle" Property="Text" Value="{Binding SelectedAnchorable.LayoutElement.Title}" />
                            <Setter TargetName="selectedElementDescription" Property="Text" Value="{x:Null}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>

</ResourceDictionary>
