<!--***********************************************************************************

   Toolkit for WPF

   Copyright (C) 2007-2022 Xceed Software Inc.

   This program is provided to you under the terms of the XCEED SOFTWARE, INC.
   COMMUNITY LICENSE AGREEMENT (for non-commercial use) as published at 
   https://github.com/xceedsoftware/wpftoolkit/blob/master/license.md 

   For more features, controls, and fast professional support,
   pick up the Plus Edition at https://xceed.com/xceed-toolkit-plus-for-wpf/

   Stay informed: follow @datagrid on Twitter or Like http://facebook.com/datagrids

  **********************************************************************************-->

<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="http://schemas.xceed.com/wpf/xaml/toolkit"
                    xmlns:pg="http://schemas.xceed.com/wpf/xaml/toolkit"
                    xmlns:conv="http://schemas.xceed.com/wpf/xaml/toolkit"
                    xmlns:editor="http://schemas.xceed.com/wpf/xaml/toolkit"
                    xmlns:prim="http://schemas.xceed.com/wpf/xaml/toolkit"
                    xmlns:pgconv="http://schemas.xceed.com/wpf/xaml/toolkit"
                    xmlns:utilities="http://schemas.xceed.com/wpf/xaml/toolkit"
                    xmlns:commands="http://schemas.xceed.com/wpf/xaml/toolkit"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    xmlns:dance="clr-namespace:Dance.Wpf">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="/Dance.Wpf;component/Themes/Theme.xaml"></ResourceDictionary>
    </ResourceDictionary.MergedDictionaries>


    <!--<ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="../../NumericUpDown/Themes/Generic.xaml" />
        <ResourceDictionary Source="../../DateTimeUpDown/Themes/Generic.xaml" />
        <ResourceDictionary Source="../../TimeSpanUpDown/Themes/Generic.xaml" />
        <ResourceDictionary Source="../../CheckComboBox/Themes/Generic.xaml" />
        <ResourceDictionary Source="../../WatermarkTextBox/Themes/Generic.xaml" />
        <ResourceDictionary Source="../../ColorPicker/Themes/Generic.xaml" />
        <ResourceDictionary Source="../../CollectionControl/Themes/Generic.xaml" />
    </ResourceDictionary.MergedDictionaries>-->

    <!-- =============================================================================== -->
    <!-- PropertyGrid                                                                    -->
    <!-- =============================================================================== -->

    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
    <conv:InverseBoolConverter x:Key="InverseBoolConverter" />
    <conv:HalfConverter x:Key="HalfConverter" />
    <conv:NullToBoolConverter x:Key="NullToBoolConverter" />
    <pgconv:ObjectToUIElementConverter x:Key="ObjectToUIElementConverter" />
    <pgconv:IsStringEmptyConverter x:Key="IsStringEmptyConverter" />
    <pgconv:ExpandableObjectMarginConverter x:Key="ExpandableObjectMarginConverter" />
    <pgconv:IsDefaultCategoryConverter x:Key="IsDefaultCategoryConverter" />
    <pgconv:SelectedObjectConverter x:Key="objectConverter" />
    <pgconv:PropertyItemEditorConverter x:Key="PropertyItemEditorConverter" />
    <pgconv:PropertyNameTextTrimmingConverter x:Key="PropertyNameTextTrimmingConverter" />


    <x:Static x:Key="EmptyString"
            Member="sys:String.Empty" />

    <!-- PropertyGrid numeric Editors -->
    <!--<Style x:Key="PropertyGridNumericUpDown"
         TargetType="{x:Type prim:InputBase}"
         BasedOn="{StaticResource NumericUpDown}">
        <Setter Property="TextAlignment"
            Value="Left" />
    </Style>

    <Style TargetType="{x:Type editor:PropertyGridEditorByteUpDown}"
         BasedOn="{StaticResource PropertyGridNumericUpDown}">
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsKeyboardFocusWithin"
                     Value="False" />
                    <Condition Property="IsMouseOver"
                     Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush"
                Value="Transparent" />
                <Setter Property="ShowButtonSpinner"
                Value="False" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type editor:PropertyGridEditorDecimalUpDown}"
         BasedOn="{StaticResource PropertyGridNumericUpDown}">
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsKeyboardFocusWithin"
                     Value="False" />
                    <Condition Property="IsMouseOver"
                     Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush"
                Value="Transparent" />
                <Setter Property="ShowButtonSpinner"
                Value="False" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type editor:PropertyGridEditorDoubleUpDown}"
         BasedOn="{StaticResource PropertyGridNumericUpDown}">
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsKeyboardFocusWithin"
                     Value="False" />
                    <Condition Property="IsMouseOver"
                     Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush"
                Value="Transparent" />
                <Setter Property="ShowButtonSpinner"
                Value="False" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type editor:PropertyGridEditorIntegerUpDown}"
         BasedOn="{StaticResource PropertyGridNumericUpDown}">
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsKeyboardFocusWithin"
                     Value="False" />
                    <Condition Property="IsMouseOver"
                     Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush"
                Value="Transparent" />
                <Setter Property="ShowButtonSpinner"
                Value="False" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type editor:PropertyGridEditorLongUpDown}"
         BasedOn="{StaticResource PropertyGridNumericUpDown}">
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsKeyboardFocusWithin"
                     Value="False" />
                    <Condition Property="IsMouseOver"
                     Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush"
                Value="Transparent" />
                <Setter Property="ShowButtonSpinner"
                Value="False" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type editor:PropertyGridEditorShortUpDown}"
         BasedOn="{StaticResource PropertyGridNumericUpDown}">
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsKeyboardFocusWithin"
                     Value="False" />
                    <Condition Property="IsMouseOver"
                     Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush"
                Value="Transparent" />
                <Setter Property="ShowButtonSpinner"
                Value="False" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type editor:PropertyGridEditorSingleUpDown}"
         BasedOn="{StaticResource PropertyGridNumericUpDown}">
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsKeyboardFocusWithin"
                     Value="False" />
                    <Condition Property="IsMouseOver"
                     Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush"
                Value="Transparent" />
                <Setter Property="ShowButtonSpinner"
                Value="False" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>-->

    <!-- PropertyGrid DateTime Editors -->
    <!--<Style TargetType="{x:Type editor:PropertyGridEditorDateTimeUpDown}"
         BasedOn="{StaticResource DateTimeUpDown}">
        <Setter Property="TextAlignment"
            Value="Left" />
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsKeyboardFocusWithin"
                     Value="False" />
                    <Condition Property="IsMouseOver"
                     Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush"
                Value="Transparent" />
                <Setter Property="ShowButtonSpinner"
                Value="False" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>-->

    <!-- PropertyGrid TimeSpan Editors -->
    <!--<Style TargetType="{x:Type editor:PropertyGridEditorTimeSpanUpDown}"
         BasedOn="{StaticResource TimeSpanUpDown}">
        <Setter Property="TextAlignment"
            Value="Left" />
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsKeyboardFocusWithin"
                     Value="False" />
                    <Condition Property="IsMouseOver"
                     Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush"
                Value="Transparent" />
                <Setter Property="ShowButtonSpinner"
                Value="False" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>-->

    <!-- PropertyGrid ComboBox Editors -->
    <!--<Style TargetType="{x:Type editor:PropertyGridEditorComboBox}"
         BasedOn="{StaticResource {x:Type ComboBox}}">
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsKeyboardFocusWithin"
                     Value="False" />
                    <Condition Property="IsMouseOver"
                     Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush"
                Value="Transparent" />
                <Setter Property="Background"
                Value="Transparent" />
            </MultiTrigger>
            <Trigger Property="IsReadOnly"
               Value="True">
                <Setter Property="IsEnabled"
                Value="False" />
            </Trigger>
            <Trigger Property="IsEnabled"
               Value="False">
                <Setter Property="Foreground"
                Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
            </Trigger>
        </Style.Triggers>
    </Style>-->

    <!-- PropertyGrid CheckBox Editors -->
    <!--<Style TargetType="{x:Type editor:PropertyGridEditorCheckBox}"
         BasedOn="{StaticResource {x:Type CheckBox}}">
        <Setter Property="Margin"
            Value="5,0,0,0" />
        <Setter Property="Margin"
            Value="5,0,0,0" />
    </Style>-->

    <!-- PropertyGrid Enum CheckBox Editors -->
    <!--<Style TargetType="{x:Type editor:PropertyGridEditorEnumCheckComboBox}"
         BasedOn="{StaticResource CheckComboBox}">
        <Setter Property="Margin"
            Value="5,0,0,0" />
        <Setter Property="Margin"
            Value="5,0,0,0" />
    </Style>-->

    <!-- PropertyGrid TextBox Editors -->
    <!--<Style TargetType="{x:Type editor:PropertyGridEditorTextBox}"
         BasedOn="{StaticResource WatermarkTextBox}">
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsKeyboardFocusWithin"
                     Value="False" />
                    <Condition Property="IsMouseOver"
                     Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush"
                Value="Transparent" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEnabled"
                     Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderThickness"
                Value="0" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>-->

    <!-- PropertyGrid TextBlock Editors -->
    <!--<Style TargetType="{x:Type editor:PropertyGridEditorTextBlock}"
         BasedOn="{StaticResource {x:Type TextBlock}}">
        <Setter Property="Foreground"
            Value="Gray" />
        <Setter Property="Margin"
            Value="5,0,0,0" />
        <Setter Property="TextTrimming"
            Value="CharacterEllipsis" />
    </Style>-->

    <!-- PropertyGrid MaskedTextBox Editors -->
    <!--<Style TargetType="{x:Type editor:PropertyGridEditorMaskedTextBox}"
         BasedOn="{StaticResource {x:Type TextBox}}">
        <Setter Property="BorderThickness"
            Value="0" />
    </Style>-->

    <!-- PropertyGrid Password Editors -->
    <!--<Style TargetType="{x:Type editor:PropertyGridEditorWatermarkPasswordBox}"
         BasedOn="{StaticResource {x:Type TextBox}}">
        <Setter Property="BorderThickness"
            Value="0" />
    </Style>-->

    <!-- PropertyGrid ColorPicker Editors -->
    <!--<Style TargetType="{x:Type editor:PropertyGridEditorColorPicker}"
         BasedOn="{StaticResource {x:Type local:ColorPicker}}">
        <Setter Property="DisplayColorAndName"
            Value="True" />
        <Setter Property="BorderThickness"
            Value="0" />
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsKeyboardFocusWithin"
                     Value="False" />
                    <Condition Property="IsMouseOver"
                     Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush"
                Value="Transparent" />
                <Setter Property="ShowDropDownButton"
                Value="False" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>-->


    <!-- PropertyGrid PrimitiveTypeCollectionControl Editors -->
    <!--<Style TargetType="{x:Type editor:PropertyGridEditorPrimitiveTypeCollectionControl}"
         BasedOn="{StaticResource PrimitiveTypeCollectionControl}">
        <Setter Property="Content"
            Value="(Collection)" />
        <Setter Property="BorderThickness"
            Value="0" />
        <Setter Property="BorderThickness"
            Value="0" />
        <Setter Property="Content"
            Value="(Collection)" />
    </Style>-->

    <!-- PropertyGrid CollectionControl Editors -->
    <!--<Style TargetType="{x:Type editor:PropertyGridEditorCollectionControl}"
         BasedOn="{StaticResource CollectionControlButton}">
    </Style>-->

    <!-- ===============================================================================   -->
    <!-- Style for all internal derived types of NumericUpDown will be done in code-behind -->
    <!-- for external themes to redefine the default style. The reason is that the         -->
    <!-- toolkit.dll uses the InternalsVisibleTo attribute which makes internal data only  -->
    <!-- available in code-behind (not xaml).                                              -->
    <!-- (ex. Office2007 theme)                                                            -->
    <!-- ===============================================================================   -->

    <!-- Internal PropertyGrid numeric Editors -->
    <!--<Style TargetType="{x:Type editor:PropertyGridEditorSByteUpDown}"
         BasedOn="{StaticResource PropertyGridNumericUpDown}">
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsKeyboardFocusWithin"
                     Value="False" />
                    <Condition Property="IsMouseOver"
                     Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush"
                Value="Transparent" />
                <Setter Property="ShowButtonSpinner"
                Value="False" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type editor:PropertyGridEditorUIntegerUpDown}"
         BasedOn="{StaticResource PropertyGridNumericUpDown}">
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsKeyboardFocusWithin"
                     Value="False" />
                    <Condition Property="IsMouseOver"
                     Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush"
                Value="Transparent" />
                <Setter Property="ShowButtonSpinner"
                Value="False" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type editor:PropertyGridEditorULongUpDown}"
         BasedOn="{StaticResource PropertyGridNumericUpDown}">
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsKeyboardFocusWithin"
                     Value="False" />
                    <Condition Property="IsMouseOver"
                     Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush"
                Value="Transparent" />
                <Setter Property="ShowButtonSpinner"
                Value="False" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type editor:PropertyGridEditorUShortUpDown}"
         BasedOn="{StaticResource PropertyGridNumericUpDown}">
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsKeyboardFocusWithin"
                     Value="False" />
                    <Condition Property="IsMouseOver"
                     Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush"
                Value="Transparent" />
                <Setter Property="ShowButtonSpinner"
                Value="False" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>-->



    <SolidColorBrush x:Key="MouseOverBorderBrush"
                   Color="#FFFFB700" />
    <LinearGradientBrush x:Key="MouseOverBackgroundBrush"
                       StartPoint="0,0"
                       EndPoint="0,1">
        <GradientStop Offset="0"
                  Color="#FFFEFBF4" />
        <GradientStop Offset="0.19"
                  Color="#FFFDE7CE" />
        <GradientStop Offset="0.39"
                  Color="#FFFDDEB8" />
        <GradientStop Offset="0.39"
                  Color="#FFFFCE6B" />
        <GradientStop Offset="0.79"
                  Color="#FFFFDE9A" />
        <GradientStop Offset="1"
                  Color="#FFFFEBAA" />
    </LinearGradientBrush>

    <SolidColorBrush x:Key="CheckedBorderBrush"
                   Color="#FFC29B29" />
    <LinearGradientBrush x:Key="CheckedBackgroundBrush"
                       StartPoint="0,0"
                       EndPoint="0,1">
        <GradientStop Offset="0"
                  Color="#FFFFDCA0" />
        <GradientStop Offset="0.18"
                  Color="#FFFFD692" />
        <GradientStop Offset="0.39"
                  Color="#FFFFC45D" />
        <GradientStop Offset="1"
                  Color="#FFFFD178" />
    </LinearGradientBrush>

    <SolidColorBrush x:Key="PressedBorderBrush"
                   Color="#FFC29B29" />
    <LinearGradientBrush x:Key="PressedBackgroundBrush"
                       StartPoint="0,0"
                       EndPoint="0,1">
        <GradientStop Offset="0"
                  Color="#FFE3C085" />
        <GradientStop Offset="0.19"
                  Color="#FFF4CC89" />
        <GradientStop Offset="0.36"
                  Color="#FFF5C777" />
        <GradientStop Offset="0.36"
                  Color="#FFF5BB56" />
        <GradientStop Offset="0.79"
                  Color="#FFF4CE9A" />
        <GradientStop Offset="1"
                  Color="#FFF3E28D" />
    </LinearGradientBrush>

    <!-- 排序方式RadioButton -->
    <Style x:Key="OptionsToggleButtonStyle" TargetType="{x:Type RadioButton}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Height" Value="22" />
        <Setter Property="Width" Value="22" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            Padding="{TemplateBinding Padding}">
                        <ContentPresenter x:Name="Content"
                                          Content="{TemplateBinding Content}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource ResourceKey={x:Static Member=dance:DanceResourceKey.BACKGROUND_BRUSH_MOUSE_OVER}}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="{DynamicResource ResourceKey={x:Static Member=dance:DanceResourceKey.CONTROL_OPACITY_DISABLED}}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Background" Value="{DynamicResource ResourceKey={x:Static Member=dance:DanceResourceKey.BACKGROUND_BRUSH_SELECTED}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- 清除过滤器Button -->
    <Style x:Key="ClearFilterButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"></Setter>
        <Setter Property="Background" Value="Yellow" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Width" Value="22"></Setter>
        <Setter Property="Height" Value="22" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}">
                        <ContentPresenter x:Name="Content"
                                           Content="{TemplateBinding Content}"
                                           VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                           HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource ResourceKey={x:Static Member=dance:DanceResourceKey.BACKGROUND_BRUSH_MOUSE_OVER}}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="{DynamicResource ResourceKey={x:Static Member=dance:DanceResourceKey.CONTROL_OPACITY_DISABLED}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- 默认类别分组头 -->
    <DataTemplate x:Key="DefaultCategoryGroupHeaderTemplate">
        <TextBlock Text="{Binding}" />
    </DataTemplate>

    <!-- 分组展开按钮 -->
    <ControlTemplate x:Key="ExpanderToggleButton" TargetType="{x:Type ToggleButton}">
        <Grid Background="Transparent">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="20" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>

            <Path x:Name="ExpandPath" RenderTransformOrigin="0.5 0.5" HorizontalAlignment="Center" VerticalAlignment="Center"
                  Data="{DynamicResource ResourceKey={x:Static Member=dance:DanceResourceKey.PATH_ARROW_MARK}}" 
                  Fill="{TemplateBinding Foreground}">
                <Path.RenderTransform>
                    <RotateTransform Angle="-90"/>
                </Path.RenderTransform>
            </Path>

            <ContentPresenter Grid.Column="1" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="RenderTransform" TargetName="ExpandPath">
                    <Setter.Value>
                        <RotateTransform Angle="-45"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- 类别分组Expander -->
    <Style x:Key="ExpanderStyle" TargetType="{x:Type Expander}">
        <Setter Property="Padding" Value="0" />
        <Setter Property="Background" Value="{DynamicResource ResourceKey={x:Static Member=dance:DanceResourceKey.CHUNK_BAR_BACKGROUND}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="22" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>
                        <Border Background="{TemplateBinding Background}"
                                BorderBrush="#FFF0F0F0">
                            <ToggleButton Template="{StaticResource ExpanderToggleButton}"
                                          IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                          OverridesDefaultStyle="True">
                                <ContentPresenter RecognizesAccessKey="True"
                                                  ContentSource="Header" VerticalAlignment="Center"
                                                  TextElement.FontWeight="Bold" />
                            </ToggleButton>
                        </Border>
                        <ContentPresenter x:Name="content" Grid.Row="1" Visibility="Collapsed"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                          Margin="{TemplateBinding Padding}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          Focusable="False" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter TargetName="content" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- 属性展开Expander -->
    <Style x:Key="PropertyExpanderStyle" TargetType="{x:Type Expander}">
        <Setter Property="Padding" Value="10 0 0 0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <ContentPresenter x:Name="content"
                                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                      Focusable="False" />
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter TargetName="content"  Property="Visibility" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- 属性项分组容器 -->
    <Style x:Key="PropertyItemGroupContainerStyle" TargetType="{x:Type GroupItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Expander x:Name="expander" Style="{StaticResource ExpanderStyle}"
                              Header="{Binding Name}" IsExpanded="True"
                              HeaderTemplate="{Binding CategoryGroupHeaderTemplate, RelativeSource={RelativeSource AncestorType={x:Type pg:PropertyGrid}}}">
                        <ItemsPresenter />
                    </Expander>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Name, Converter={StaticResource IsDefaultCategoryConverter}}" Value="True" />
                    <Condition Binding="{Binding IsMiscCategoryLabelHidden, RelativeSource={RelativeSource AncestorType={x:Type pg:PropertyGrid}}}" Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type GroupItem}">
                            <!-- No Expander for the Misc Category if IsMiscCategoryLabelHidden == true-->
                            <ItemsPresenter />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <!-- 单独默认分类项分组容器 -->
    <Style x:Key="SingleDefaultCategoryItemGroupContainerStyle"
         TargetType="{x:Type GroupItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <!-- No Expander for the Misc Category if Misc category is the only category-->
                    <ItemsPresenter />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- 右键菜单 -->
    <Style TargetType="{x:Type pg:PropertyGridContextMenu}">
        <Setter Property="Background" Value="{DynamicResource ResourceKey={x:Static Member=dance:DanceResourceKey.CHUNK_BAR_BACKGROUND}}"/>
        <Setter Property="FontFamily" Value="{DynamicResource ResourceKey={x:Static Member=dance:DanceResourceKey.FONT_FAMILY}}"/>
        <Setter Property="FontSize" Value="{DynamicResource ResourceKey={x:Static Member=dance:DanceResourceKey.FONT_SIZE}}"/>
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey={x:Static Member=dance:DanceResourceKey.FOREGROUND_BRUSH}}"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey={x:Static Member=dance:DanceResourceKey.BORDER_BRUSH}}"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Grid.IsSharedSizeScope" Value="true"/>
        <Setter Property="HasDropShadow" Value="True"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                    <Border Name="ContextMenuBorder" Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <ScrollViewer Name="ContextMenuScrollViewer"
                                      Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}}">
                            <Grid RenderOptions.ClearTypeHint="Enabled">
                                <ItemsPresenter Name="ItemsPresenter" Margin="{TemplateBinding Padding}"
                                            KeyboardNavigation.DirectionalNavigation="Cycle"
                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- 属性表格右键菜单 -->
    <pg:PropertyGridContextMenu x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type pg:PropertyGrid}, ResourceId=SelectedObjectAdvancedOptionsMenu}">
        <MenuItem Header="重置值"
                  Command="commands:PropertyItemCommands.ResetValue"
                  CommandParameter="{Binding}"
                  CommandTarget="{Binding Path=PlacementTarget, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ContextMenu}}}"/>
    </pg:PropertyGridContextMenu>

    <!-- 类别分组样式选择器 -->
    <pg:CategoryGroupStyleSelector x:Key="categoryGroupStyleSelector"
                                   SingleDefaultCategoryItemGroupStyle="{StaticResource SingleDefaultCategoryItemGroupContainerStyle}"
                                   ItemGroupStyle="{StaticResource PropertyItemGroupContainerStyle}" />


    <!-- 属性项 -->
    <Style TargetType="{x:Type pg:PropertyItemBase}">
        <Setter Property="Background" Value="Transparent" />
        <!-- Set the margin at 1 pixel bottom to let the horizontal "line" effect appear. -->
        <Setter Property="Margin" Value="0,0,0,1" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type pg:PropertyItemBase}">
                    <Border ContextMenu="{Binding AdvancedOptionsMenu, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=pg:PropertyGrid}}"
                            ContextMenuService.Placement="Bottom">
                        <Grid VerticalAlignment="Stretch" HorizontalAlignment="Stretch">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="{Binding NameColumnWidth, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type pg:PropertyGrid}}}" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>

                            <!-- Set the BorderThickness at 1 pixel to the right to let the "vertical line" appear -->
                            <Border x:Name="PART_Name"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    Margin="0,0,1,0"
                                    VerticalAlignment="Stretch"
                                    HorizontalAlignment="Stretch">
                                <Grid Margin="2,2,2,2"
                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition Width="Auto" />
                                    </Grid.ColumnDefinitions>

                                    <Grid Margin="{Binding Level, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ExpandableObjectMarginConverter}}">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition x:Name="_expandableButtonColumn"
                                                              Width="{Binding PropertyNameLeftPadding, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type pg:PropertyGrid}}}" />
                                            <ColumnDefinition Width="*" />
                                        </Grid.ColumnDefinitions>

                                        <ToggleButton x:Name="_expandableButton"
                                                      Grid.Column="0"
                                                      Template="{StaticResource ExpanderToggleButton}"
                                                      OverridesDefaultStyle="True"
                                                      IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                                                      Visibility="{Binding IsExpandable, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}" >
                                        </ToggleButton>

                                        <pg:TrimmedTextBlock x:Name="_text"
                                         Grid.Column="1"
                                         Text="{Binding DisplayName, RelativeSource={RelativeSource TemplatedParent}}"
                                         HighlightedText="{Binding HighlightedText, RelativeSource={RelativeSource TemplatedParent}}"
                                         HorizontalAlignment="Stretch"
                                         VerticalAlignment="Center"
                                         TextTrimming="{Binding PropertyNameTextWrapping, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=pg:PropertyGrid}, Converter={StaticResource PropertyNameTextTrimmingConverter}}"
                                         TextWrapping="{Binding PropertyNameTextWrapping, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=pg:PropertyGrid}}"
                                         IsEnabled="{Binding IsReadOnly, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=pg:PropertyGrid}, Converter={StaticResource InverseBoolConverter}}" >
                                        </pg:TrimmedTextBlock>
                                    </Grid>

                                    <Grid Grid.Column="1"
                        HorizontalAlignment="Right"
                        Margin="5,0,5,0"
                        Visibility="{Binding ShowAdvancedOptions, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=pg:PropertyGrid}, Converter={StaticResource BooleanToVisibilityConverter}}"
                        utilities:ContextMenuUtilities.OpenOnMouseLeftButtonClick="True"
                        ContextMenu="{Binding AdvancedOptionsMenu, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=pg:PropertyGrid}}">

                                        <!-- ImageSource is set in Triggers for others Themes to set their proper icons -->
                                        <Image x:Name="_optionsImage"
                           Width="11"
                           Height="11"
                           ToolTip="{Binding AdvancedOptionsTooltip, RelativeSource={RelativeSource TemplatedParent}}" >
                                        </Image>
                                    </Grid>
                                </Grid>
                            </Border>

                            <Border x:Name="PART_Editor"
                      Grid.Column="1"
                      Background="{TemplateBinding Background}"
                      BorderBrush="{TemplateBinding BorderBrush}"
                      BorderThickness="{TemplateBinding BorderThickness}"
                      KeyboardNavigation.DirectionalNavigation="None"
                      VerticalAlignment="Stretch"
                      HorizontalAlignment="Stretch">
                                <Border.ToolTip>
                                    <ToolTip Visibility="Collapsed" />
                                </Border.ToolTip >
                                <ContentControl x:Name="PART_ValueContainer"
                                Focusable="False"
                                IsTabStop="False"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                    <ContentControl.Content>
                                        <MultiBinding Converter="{StaticResource PropertyItemEditorConverter}">
                                            <Binding Path="Editor"
                               RelativeSource="{RelativeSource TemplatedParent}" />
                                            <Binding Path="IsReadOnly"
                               RelativeSource="{RelativeSource AncestorType={x:Type pg:PropertyGrid}}" />
                                            <Binding Path="IsReadOnly"
                               RelativeSource="{RelativeSource TemplatedParent}" />
                                        </MultiBinding>
                                    </ContentControl.Content>
                                </ContentControl>
                            </Border>

                            <Expander x:Name="_propertyExpander"
                        Grid.ColumnSpan="2"
                        Grid.Row="1"
                        IsExpanded="{TemplateBinding IsExpanded}"
                        Style="{StaticResource PropertyExpanderStyle}"
                        IsEnabled="True">
                                <pg:PropertyItemsControl x:Name="PART_PropertyItemsControl"
                                         IsTabStop="False"
                                         Focusable="False"
                                         ItemsSource="{Binding Properties, RelativeSource={RelativeSource TemplatedParent}}"
                                         ItemContainerStyle="{Binding PropertyContainerStyle, RelativeSource={RelativeSource TemplatedParent}}"
                                         VirtualizingStackPanel.IsVirtualizing="{Binding IsVirtualizing, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=pg:PropertyGrid}}"
                                         VirtualizingStackPanel.VirtualizationMode="Recycling"
                                         ScrollViewer.CanContentScroll="{Binding IsVirtualizing, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=pg:PropertyGrid}}">
                                    <ItemsControl.ItemsPanel>
                                        <ItemsPanelTemplate>
                                            <VirtualizingStackPanel />
                                        </ItemsPanelTemplate>
                                    </ItemsControl.ItemsPanel>

                                    <ItemsControl.GroupStyle>
                                        <GroupStyle ContainerStyleSelector="{StaticResource categoryGroupStyleSelector}" />
                                    </ItemsControl.GroupStyle>

                                    <ItemsControl.Template>
                                        <ControlTemplate>
                                            <Border BorderThickness="{TemplateBinding BorderThickness}"
                              Padding="{TemplateBinding Padding}"
                              BorderBrush="{TemplateBinding BorderBrush}"
                              Background="{TemplateBinding Background}"
                              SnapsToDevicePixels="True">
                                                <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                            </Border>
                                        </ControlTemplate>
                                    </ItemsControl.Template>

                                </pg:PropertyItemsControl>
                            </Expander>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver"
                     Value="True">
                            <Setter TargetName="PART_Name"
                      Property="Background"
                      Value="#CED4DF" />
                        </Trigger>
                        <Trigger Property="IsSelected"
                     Value="True">
                            <Setter TargetName="PART_Name"
                      Property="Background"
                      Value="#43577B" />
                            <Setter TargetName="PART_Name"
                      Property="TextElement.Foreground"
                      Value="White" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                     Value="False">
                            <Setter Property="Foreground"
                      TargetName="PART_ValueContainer"
                      Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                            <Setter Property="Foreground"
                      TargetName="_text"
                      Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding ShowDescriptionByTooltip, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=pg:PropertyGrid}}"
                           Value="True" />
                                <Condition Binding="{Binding Description, RelativeSource={RelativeSource Self}, Converter={StaticResource IsStringEmptyConverter}}"
                           Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="ToolTipService.ToolTip"
                      Value="{Binding Description, RelativeSource={RelativeSource TemplatedParent}}"
                      TargetName="PART_Name" />
                        </MultiDataTrigger>
                        <Trigger Property="Validation.HasError"
                     Value="true">
                            <Setter Property="ToolTip"
                      Value="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=(Validation.Errors).CurrentItem.ErrorContent}" />
                        </Trigger>
                        <Trigger Property="Visibility"
                     Value="Visible"
                     SourceName="_expandableButton">
                            <Setter Property="Focusable"
                      Value="False" />
                            <Setter Property="MinWidth"
                      Value="15"
                      TargetName="_expandableButtonColumn" />
                        </Trigger>

                        <DataTrigger Binding="{Binding ElementName=_optionsImage, Path=ToolTip}"
                         Value="{x:Static pg:StringConstants.Local}">
                            <Setter TargetName="_optionsImage"
                      Property="Source"
                      Value="./Images/Local11.png" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding ElementName=_optionsImage, Path=ToolTip}"
                         Value="{x:Static pg:StringConstants.Resource}">
                            <Setter TargetName="_optionsImage"
                      Property="Source"
                      Value="./Images/Resource11.png" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding ElementName=_optionsImage, Path=ToolTip}"
                         Value="{x:Static pg:StringConstants.Databinding}">
                            <Setter TargetName="_optionsImage"
                      Property="Source"
                      Value="./Images/Database11.png" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding ElementName=_optionsImage, Path=ToolTip}"
                         Value="{x:Static pg:StringConstants.Inheritance}">
                            <Setter TargetName="_optionsImage"
                      Property="Source"
                      Value="./Images/Inheritance11.png" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding ElementName=_optionsImage, Path=ToolTip}"
                         Value="{x:Static pg:StringConstants.StyleSetter}">
                            <Setter TargetName="_optionsImage"
                      Property="Source"
                      Value="./Images/Style11.png" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding ElementName=_optionsImage, Path=ToolTip}"
                         Value="{x:Static pg:StringConstants.Default}">
                            <Setter TargetName="_optionsImage"
                      Property="Source"
                      Value="./Images/AdvancedProperties11.png" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type pg:PropertyItem}"
         BasedOn="{StaticResource {x:Type pg:PropertyItemBase}}" />

    <Style TargetType="{x:Type pg:PropertyGrid}">
        <Setter Property="AdvancedOptionsMenu"
            Value="{StaticResource {ComponentResourceKey TypeInTargetAssembly={x:Type pg:PropertyGrid}, ResourceId=SelectedObjectAdvancedOptionsMenu}}" />
        <Setter Property="Background"
            Value="#BCC7D8" />
        <Setter Property="BorderBrush"
            Value="#43577B" />
        <Setter Property="BorderThickness"
            Value="1" />
        <Setter Property="SelectedObjectType"
            Value="{Binding RelativeSource={RelativeSource Self}, Path=SelectedObject, Converter={StaticResource objectConverter}, ConverterParameter=Type}" />
        <Setter Property="SelectedObjectTypeName"
            Value="{Binding RelativeSource={RelativeSource Self}, Path=SelectedObject, Converter={StaticResource objectConverter}, ConverterParameter=TypeName}" />
        <Setter Property="SelectedObjectName"
            Value="{Binding RelativeSource={RelativeSource Self}, Path=SelectedObject, Converter={StaticResource objectConverter}, ConverterParameter=SelectedObjectName}" />
        <Setter Property="CategoryGroupHeaderTemplate"
            Value="{StaticResource DefaultCategoryGroupHeaderTemplate}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type pg:PropertyGrid}">
                    <Border Background="{TemplateBinding Background}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid Margin="{TemplateBinding Padding}">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                                <RowDefinition />
                                <RowDefinition Height="5" />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>

                            <StackPanel x:Name="selectObjectNamePanel"
                          Orientation="Horizontal">
                                <Border Background="White"
                        BorderBrush="Black"
                        Visibility="{Binding ShowPreview, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}"
                        BorderThickness="1"
                        Width="44"
                        Height="44"
                        Margin="6,4,0,4"
                        Padding="2">
                                    <Rectangle>
                                        <Rectangle.Fill>
                                            <VisualBrush Stretch="Uniform"
                                   Visual="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ObjectToUIElementConverter}, Path=SelectedObject}" />
                                        </Rectangle.Fill>
                                    </Rectangle>
                                </Border>
                                <StackPanel Orientation="Horizontal"
                            VerticalAlignment="Center"
                            Margin="6,2,6,4"
                            Visibility="{Binding ShowTitle, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}">
                                    <Grid MaxWidth="{Binding ActualWidth, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource HalfConverter}, ConverterParameter=17}">
                                        <pg:TrimmedTextBlock Text="{TemplateBinding SelectedObjectTypeName}"
                                         TextTrimming="CharacterEllipsis"
                                         FontWeight="Bold" >
                                        </pg:TrimmedTextBlock>
                                    </Grid>
                                    <Grid MaxWidth="{Binding ActualWidth, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource HalfConverter}, ConverterParameter=17}"
                        Margin="5,0,0,0">
                                        <pg:TrimmedTextBlock Text="{TemplateBinding SelectedObjectName}"
                                         TextTrimming="CharacterEllipsis" >
                                        </pg:TrimmedTextBlock>
                                    </Grid>
                                </StackPanel>
                            </StackPanel>


                            <Grid x:Name="toolsContainer"
                    Grid.Row="1"
                    Margin="4,0,4,4">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>
                                <Grid x:Name="sortButtonContainer"
                      Margin="4"
                      Visibility="{Binding ShowSortOptions, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}">
                                    <StackPanel Orientation="Horizontal"
                              Margin="1">
                                        <RadioButton IsChecked="{Binding IsCategorized, RelativeSource={RelativeSource TemplatedParent}}"
                                 VerticalAlignment="Center"
                                 Style="{StaticResource OptionsToggleButtonStyle}"
                                 ToolTip="Categorized">
                                            <Image Source="./../Images/Categorize16.png"
                             Width="16"
                             Height="16" >
                                            </Image>
                                        </RadioButton>
                                        <RadioButton IsChecked="{Binding IsCategorized, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource InverseBoolConverter}, Mode=OneWay}"
                                 VerticalAlignment="Center"
                                 Style="{StaticResource OptionsToggleButtonStyle}"
                                 ToolTip="Alphabetical">
                                            <Image Source="./../Images/SortAscending16.png"
                             Width="16"
                             Height="16" >
                                            </Image>
                                        </RadioButton>
                                    </StackPanel>
                                </Grid>

                                <Border x:Name="searchBoxContainer"
                        Grid.Column="1"
                        Margin="4,4,0,4"
                        Background="White"
                        BorderBrush="Gray"
                        BorderThickness="1"
                        Visibility="{Binding ShowSearchBox, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="*" />
                                            <ColumnDefinition Width="Auto" />
                                        </Grid.ColumnDefinitions>
                                        <local:WatermarkTextBox x:Name="_txtFilter"
                                            Background="Transparent"
                                            Text="{Binding Filter, RelativeSource={RelativeSource TemplatedParent}, UpdateSourceTrigger=PropertyChanged}"
                                            Watermark="{TemplateBinding FilterWatermark}"
                                            BorderThickness="1">
                                            <local:WatermarkTextBox.Style>
                                                <Style TargetType="Control">
                                                    <Setter Property="BorderBrush"
                                  Value="Transparent" />
                                                    <Style.Triggers>
                                                        <Trigger Property="IsMouseOver"
                                     Value="True">
                                                            <Setter Property="BorderBrush"
                                      Value="{StaticResource MouseOverBorderBrush}" />
                                                        </Trigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </local:WatermarkTextBox.Style>

                                        </local:WatermarkTextBox>

                                        <Button Grid.Column="1"
                            Command="commands:PropertyGridCommands.ClearFilter"
                            Style="{StaticResource ClearFilterButtonStyle}"
                            HorizontalAlignment="Left">
                                            <Image Source="./../Images/ClearFilter16.png"
                             Width="16"
                             Height="16" >
                                            </Image>
                                        </Button>
                                    </Grid>
                                </Border>
                            </Grid>

                            <Grid Grid.Row="2"
                    Background="{x:Static SystemColors.WindowBrush}">
                                <pg:PropertyItemsControl  x:Name="PART_PropertyItemsControl"
                                          IsTabStop="False"
                                          Focusable="False"
                                          ItemsSource="{Binding Properties, RelativeSource={RelativeSource TemplatedParent}}"
                                          ItemContainerStyle="{Binding PropertyContainerStyle, RelativeSource={RelativeSource TemplatedParent}}"
                                          Background="{x:Static SystemColors.ControlBrush}"
                                          VirtualizingStackPanel.IsVirtualizing="{Binding IsVirtualizing, RelativeSource={RelativeSource TemplatedParent}}"
                                          VirtualizingStackPanel.VirtualizationMode="Recycling"
                                          ScrollViewer.CanContentScroll="{Binding IsVirtualizing, RelativeSource={RelativeSource TemplatedParent}}"
                                          VerticalAlignment="Top">
                                    <ItemsControl.ItemsPanel>
                                        <ItemsPanelTemplate>
                                            <VirtualizingStackPanel />
                                        </ItemsPanelTemplate>
                                    </ItemsControl.ItemsPanel>

                                    <ItemsControl.GroupStyle>
                                        <GroupStyle ContainerStyleSelector="{StaticResource categoryGroupStyleSelector}" />
                                    </ItemsControl.GroupStyle>

                                    <ItemsControl.Template>
                                        <ControlTemplate>
                                            <Border BorderThickness="{TemplateBinding BorderThickness}"
                              Padding="{TemplateBinding Padding}"
                              BorderBrush="{TemplateBinding BorderBrush}"
                              Background="{TemplateBinding Background}"
                              SnapsToDevicePixels="True">
                                                <ScrollViewer x:Name="ScrollBar"
                                      Padding="{TemplateBinding Padding}"
                                      Focusable="False"
                                      VerticalScrollBarVisibility="Auto"
                                      HorizontalScrollBarVisibility="Disabled">
                                                    <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                                </ScrollViewer>
                                            </Border>
                                            <ControlTemplate.Triggers>
                                                <DataTrigger Binding="{Binding ShowHorizontalScrollBar, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=pg:PropertyGrid}}"
                                     Value="True">
                                                    <Setter Property="HorizontalScrollBarVisibility"
                                  Value="Auto"
                                  TargetName="ScrollBar" />
                                                </DataTrigger>
                                            </ControlTemplate.Triggers>
                                        </ControlTemplate>
                                    </ItemsControl.Template>

                                </pg:PropertyItemsControl>

                                <Thumb x:Name="PART_DragThumb"
                       HorizontalAlignment="Left"
                       Width="5"
                       Margin="6,0,0,0"
                       Cursor="SizeWE">
                                    <Thumb.Template>
                                        <ControlTemplate>
                                            <Border Background="Transparent" />
                                        </ControlTemplate>
                                    </Thumb.Template>
                                </Thumb>

                            </Grid>

                            <GridSplitter Height="3"
                            Grid.Row="3"
                            HorizontalAlignment="Stretch"
                            Visibility="{Binding ShowSummary, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}" >
                            </GridSplitter>
                            <StackPanel Grid.Row="4"
                          Margin="0,0,0,5"
                          Visibility="{Binding ShowSummary, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}">
                                <TextBlock Padding="2 2 2 0"
                           FontWeight="Bold"
                           Text="{Binding SelectedPropertyItem.DisplayName, RelativeSource={RelativeSource TemplatedParent}}" >
                                </TextBlock>
                                <TextBlock Padding="5 2 2 0"
                           TextWrapping="WrapWithOverflow"
                           Text="{Binding SelectedPropertyItem.Description, RelativeSource={RelativeSource TemplatedParent}}" >
                                </TextBlock>
                            </StackPanel>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition SourceName="searchBoxContainer"
                           Property="Visibility"
                           Value="Collapsed" />
                                <Condition SourceName="sortButtonContainer"
                           Property="Visibility"
                           Value="Collapsed" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="toolsContainer"
                      Property="Visibility"
                      Value="Collapsed" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>